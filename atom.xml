<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Simian's Blog]]></title>
  <subtitle><![CDATA[Code, Music, Interactive Media, Community]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://simiansblog.com/"/>
  <updated>2015-04-24T07:03:06.000Z</updated>
  <id>http://simiansblog.com/</id>
  
  <author>
    <name><![CDATA[Jesse Harlin]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Organizing A Slush Generator Part 2 : Testing]]></title>
    <link href="http://simiansblog.com/2015/04/24/Organizing-A-Slush-Generator-Part-2/"/>
    <id>http://simiansblog.com/2015/04/24/Organizing-A-Slush-Generator-Part-2/</id>
    <published>2015-04-24T05:10:42.000Z</published>
    <updated>2015-04-24T07:03:06.000Z</updated>
    <content type="html"><![CDATA[<p>Part of the reason of an improced organization is a better units of work for testing. In the last section, we arranged our files in such a way that we wanted to make it easier to have each file do a singluar task each.</p>
<p>Because We have 4 totally separate files with separate jobs-each test file will also look pretty different.</p>
<a id="more"></a>
<h2 id="Default_answers">Default answers</h2><p>Probably the most challenging file to test is the default answers file. This is a necessary file, but it involves using a lot of node globals and private variables. This seems to make it untestable at a glance, but its actualyl doable with a module called <code>rewire</code>. REqire is a drop in replacement for require, that for all practical purposes acts fully identical - except you have a way to override private variables in the module. Normally, this is a no-no, but not in this case. We need to mock process, and this is how it can be done.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rewire = <span class="built_in">require</span>(<span class="string">'rewire'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> defaultTransforms = rewire(<span class="string">'./../../slush/default/answers'</span>);</span><br></pre></td></tr></table></figure>
<p>So we use <code>rewire</code>, not <code>require</code>.</p>
<p>Here is mocking both the win32 defaults and nonwin32 defaults, with chai’s expect for assertion.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'default-answers'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">mockCwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'/example/of/something'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> mockEnv = &#123;</span><br><span class="line">    USERNAME: <span class="string">'Jesse_Harlin'</span>,</span><br><span class="line">    HOME: <span class="string">'/Users/YOURMOM'</span>,</span><br><span class="line">    USERPROFILE: <span class="string">'C:\Users\Jesse_Harlin'</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  describe(<span class="string">'process is win 32'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    defaultTransforms.__set__(&#123;</span><br><span class="line">      process: &#123;</span><br><span class="line">        env: mockEnv,</span><br><span class="line">        cwd: mockCwd,</span><br><span class="line">        platform: <span class="string">'win32'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> defaults = defaultTransforms(),</span><br><span class="line">      out = &#123;</span><br><span class="line">        appName: <span class="string">'something'</span>,</span><br><span class="line">        userName: <span class="string">'Jesse_Harlin'</span>,</span><br><span class="line">        authorName: <span class="string">''</span>,</span><br><span class="line">        authorEmail: <span class="string">''</span></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">    expect(defaults)</span><br><span class="line">      .to</span><br><span class="line">      .eql(out);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  describe(<span class="string">'process is other than win 32'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    defaultTransforms.__set__(&#123;</span><br><span class="line">      process: &#123;</span><br><span class="line">        env: mockEnv,</span><br><span class="line">        cwd: mockCwd,</span><br><span class="line">        platform: <span class="string">'notWin32'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> defaults = defaultTransforms(),</span><br><span class="line">      out = &#123;</span><br><span class="line">        appName: <span class="string">'something'</span>,</span><br><span class="line">        userName: <span class="string">'YOURMOM'</span>,</span><br><span class="line">        authorName: <span class="string">''</span>,</span><br><span class="line">        authorEmail: <span class="string">''</span></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">    expect(defaults)</span><br><span class="line">      .to</span><br><span class="line">      .eql(out);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>Part of the reason of an improced organization is a better units of work for testing. In the last section, we arranged our files in such a way that we wanted to make it easier to have each file do a singluar task each.</p>
<p>Because We have 4 totally separate files with separate jobs-each test file will also look pretty different.</p>]]>
    
    </summary>
    
      <category term="Mocking" scheme="http://simiansblog.com/tags/Mocking/"/>
    
      <category term="Reqire" scheme="http://simiansblog.com/tags/Reqire/"/>
    
      <category term="Slush" scheme="http://simiansblog.com/tags/Slush/"/>
    
      <category term="Testing" scheme="http://simiansblog.com/tags/Testing/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Organizing A Slush Generator Part 1 : Structure]]></title>
    <link href="http://simiansblog.com/2015/04/05/Organizing-A-Slush-Generator-Part-1/"/>
    <id>http://simiansblog.com/2015/04/05/Organizing-A-Slush-Generator-Part-1/</id>
    <published>2015-04-06T02:56:34.000Z</published>
    <updated>2015-04-24T05:11:43.000Z</updated>
    <content type="html"><![CDATA[<p>If you’re making a scaffold, or even a gulpfile of any degree of size or signifigance, you’ll quickly learn that placing every task you make in a single file can lead to a big mess after a while. One of the most attractive things about slush, is that it uses gulp, and one of the most attractive things about gulp is that it is extremely organizeable, due to its modular task building system.</p>
<a id="more"></a>
<p>When you first get started, or run the <code>slush generator-generator</code>, the first thing you will notice is that a lot of folks put everything in the main slush file. I don’t really recommend this. Its easier, at least to first make a separate <code>folder</code> called “slush”.</p>
<p>What we want is to separate the tasks by folder, and then per task, separate each one of these by function. If there is a complex task, consisting of smaller parts, we cna break those down by file in the folder. When you’re doing tests, its much easier to have your test directory match that of your slush directory. Assuming each file is single responsibility, and each task has a folder, you will then also have one test file and folder to match the source.</p>
<p>Lets factor out a default task. Consider some code, that is like what is spit out by the default <code>generator-generator</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> * slush-test</span><br><span class="line"> * https://github.com/the-simian/slush-test</span><br><span class="line"> *</span><br><span class="line"> * Copyright (c) 2015, Jesse Harlin</span><br><span class="line"> * Licensed under the MIT license.</span><br><span class="line"> */</span></span><br><span class="line"><span class="pi"></span><br><span class="line">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</span><br><span class="line">    install = <span class="built_in">require</span>(<span class="string">'gulp-install'</span>),</span><br><span class="line">    template = <span class="built_in">require</span>(<span class="string">'gulp-template'</span>),</span><br><span class="line">    rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>),</span><br><span class="line">    _ = <span class="built_in">require</span>(<span class="string">'underscore.string'</span>),</span><br><span class="line">    inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">format</span><span class="params">(string)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> username = string.toLowerCase();</span><br><span class="line">    <span class="keyword">return</span> username.replace(<span class="regexp">/\s/g</span>, <span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> defaults = (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> workingDirName = path.basename(process.cwd()),</span><br><span class="line">      homeDir, osUserName, configFile, user;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (process.platform === <span class="string">'win32'</span>) &#123;</span><br><span class="line">        homeDir = process.env.USERPROFILE;</span><br><span class="line">        osUserName = process.env.USERNAME || path.basename(homeDir).toLowerCase();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        homeDir = process.env.HOME || process.env.HOMEPATH;</span><br><span class="line">        osUserName = homeDir &amp;&amp; homeDir.split(<span class="string">'/'</span>).pop() || <span class="string">'root'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    configFile = path.join(homeDir, <span class="string">'.gitconfig'</span>);</span><br><span class="line">    user = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">require</span>(<span class="string">'fs'</span>).existsSync(configFile)) &#123;</span><br><span class="line">        user = <span class="built_in">require</span>(<span class="string">'iniparser'</span>).parseSync(configFile).user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        appName: workingDirName,</span><br><span class="line">        userName: osUserName || format(user.name || <span class="string">''</span>),</span><br><span class="line">        authorName: user.name || <span class="string">''</span>,</span><br><span class="line">        authorEmail: user.email || <span class="string">''</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(done)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> prompts = [&#123;</span><br><span class="line">        name: <span class="string">'appName'</span>,</span><br><span class="line">        message: <span class="string">'What is the name of your project?'</span>,</span><br><span class="line">        <span class="keyword">default</span>: defaults.appName</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: <span class="string">'appDescription'</span>,</span><br><span class="line">        message: <span class="string">'What is the description?'</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: <span class="string">'appVersion'</span>,</span><br><span class="line">        message: <span class="string">'What is the version of your project?'</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">'0.1.0'</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: <span class="string">'authorName'</span>,</span><br><span class="line">        message: <span class="string">'What is the author name?'</span>,</span><br><span class="line">        <span class="keyword">default</span>: defaults.authorName</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: <span class="string">'authorEmail'</span>,</span><br><span class="line">        message: <span class="string">'What is the author email?'</span>,</span><br><span class="line">        <span class="keyword">default</span>: defaults.authorEmail</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: <span class="string">'userName'</span>,</span><br><span class="line">        message: <span class="string">'What is the github username?'</span>,</span><br><span class="line">        <span class="keyword">default</span>: defaults.userName</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        type: <span class="string">'confirm'</span>,</span><br><span class="line">        name: <span class="string">'moveon'</span>,</span><br><span class="line">        message: <span class="string">'Continue?'</span></span><br><span class="line">    &#125;];</span><br><span class="line">    <span class="comment">//Ask</span></span><br><span class="line">    inquirer.prompt(prompts,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="params">(answers)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!answers.moveon) &#123;</span><br><span class="line">                <span class="keyword">return</span> done();</span><br><span class="line">            &#125;</span><br><span class="line">            answers.appNameSlug = _.slugify(answers.appName);</span><br><span class="line">            gulp.src(__dirname + <span class="string">'/templates/**'</span>)</span><br><span class="line">                .pipe(template(answers))</span><br><span class="line">                .pipe(rename(<span class="function"><span class="keyword">function</span> <span class="params">(file)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (file.basename[<span class="number">0</span>] === <span class="string">'_'</span>) &#123;</span><br><span class="line">                        file.basename = <span class="string">'.'</span> + file.basename.slice(<span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;))</span><br><span class="line">                .pipe(gulp.dest(<span class="string">'./'</span>))</span><br><span class="line">                .pipe(install())</span><br><span class="line">                .on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">                    done();</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>I should add that the default generator is not concerned with testing at all, but we are. So what is happening, big picture in this file?</p>
<ul>
<li>we are requiring “stuff”</li>
<li>we need some default answers</li>
<li>we need to take those answers and make them template-ready (transform)</li>
<li>we ask some questions</li>
<li>we do a task.</li>
</ul>
<p>These are, in my opinion good ways to break apart the tasks. Have one file for default answers, one for questions, and one for tasks. Let each file require only what it needs. Instead of putting everyting in one big file, lets break it up.</p>
<p>We add the <code>slush folder</code> in the root and give a folderr to the default task. We will do this for every task henceforth!</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+-- default</span><br><span class="line">|   +-- questions.js</span><br><span class="line">|   +-- task.js</span><br><span class="line">|   +-- transforms.js</span><br><span class="line">|   +-- defaults.js</span><br><span class="line"></span><br><span class="line">slushfile.js</span><br></pre></td></tr></table></figure>
<p>A single slush file becomes something like this.</p>
<p>Now, in the slushfile itself, you can include a reference to the files in the folder. You really only need to refrence the <code>task</code> file in the default directory.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">  templatesDir: __dirname + <span class="string">'/templates/**'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./slush/default/task'</span>)(options);</span><br></pre></td></tr></table></figure>
<p>It might end up looking something like that.</p>
<p>Now, for every taks you add, you can include it in the one parent slushfile. Any global options, you want to pass around (such as the location of your templates directory), you can make an options object.</p>
<p>Aside from overall organization, this is going to make your entire slush project much, much easier to test. The questions module is largely declarative. There’s going to be some complexity there, due to SLOc, but theres no cyclomatic complxity to it, or branching. It basically won’t reall yneed test coverage. Its nice to separate that out early.</p>
<p>Then comes the <code>transforms.js</code>. This is probably the main point of failure if somethign goes wrong. The idea is that we don’t want to make the templating mechanism do too much work. Basically, if you need your app name slugified in some places, but not others, if you need to sanitize input - this is where all that happens. Do it here, and test it easily…do it in your template and it gets murkier. These tests will look like a bunch of input json objects, and expected output json objects. Very straightforward.</p>
<p>There is also the <code>defaults.js</code>. This is where you’d put any default answers for questions you might expect. For example, what if for a username, you want to try and guess it from <code>process.env</code>, or something like that. You can do that here.</p>
<p>The final file is <code>task.js</code>. thankfully, since you proke everythign apart, this really has a single,testable, purpose.. template and write your files in a directory. This can be done with the <code>mock-gulp-dest</code> module very easily.</p>
<p>Now with a directory structure in place, it actually makes sense to write the tests .. first.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>If you’re making a scaffold, or even a gulpfile of any degree of size or signifigance, you’ll quickly learn that placing every task you make in a single file can lead to a big mess after a while. One of the most attractive things about slush, is that it uses gulp, and one of the most attractive things about gulp is that it is extremely organizeable, due to its modular task building system.</p>]]>
    
    </summary>
    
      <category term="project organization" scheme="http://simiansblog.com/tags/project-organization/"/>
    
      <category term="scaffolding" scheme="http://simiansblog.com/tags/scaffolding/"/>
    
      <category term="slush" scheme="http://simiansblog.com/tags/slush/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Testing a Slush Generator]]></title>
    <link href="http://simiansblog.com/2015/04/04/testing-a-slush-generator/"/>
    <id>http://simiansblog.com/2015/04/04/testing-a-slush-generator/</id>
    <published>2015-04-05T03:43:43.000Z</published>
    <updated>2015-04-06T03:26:15.000Z</updated>
    <content type="html"><![CDATA[<img src="/images/slush-howto/slush_test.png">
<p>One thing I’ve noticed while looking at the generators for both yeoman and slush, is that overall, they tend to be undertested. I think this is for two reasons. Firstly, I think many folks consider this kind of dev tool to not be, generally speaking, differnt from production code. Its a tool to assist a dev work, and not necessarily subject to the same level of testing rigor. I think anothe reason is that testing file IO is fundamentally much more challengin then a typical unit test.</p>
<a id="more"></a>
<p>Thankfully, since we are testing gulp output, theres a handy module that does make things easier called <a href="https://github.com/slushjs/mock-gulp-dest" target="_blank" rel="external"><code>mock-gulp-dest</code>.</a> If you look at the source of <code>mock-gulp-dest</code>, you’ll notice that it uses <code>through2</code> to essentially handle the mocking of the file IO. Of course you don’t want to <em>actually</em> write files to the disk and assert their existance. It might be tempting to use one of the <code>fs</code> assertion tools and actually put the files somethere, but that’s pretty messy in the long run, and not pragmatic for running tests in multiple environments. Rather, <code>mock-gulp-dest</code> actually stubbs the <code>dest</code> method with one that doesn’t actually write, and then reverts it when complete. That said, this is ultimately a sophisticated function stub.</p>
<p>Firstly, its handy to make a fixture to mock the inquirer output. </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mockPrompt</span><span class="params">(answers)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">assignAnswer</span><span class="params">(prompt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(prompt.name <span class="keyword">in</span> answers)) &#123;</span><br><span class="line">      answers[prompt.name] = prompt.default;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">inquirerPrompt</span><span class="params">(prompts, done)</span> </span>&#123;</span><br><span class="line">    [].concat(prompts).forEach(assignAnswer);</span><br><span class="line">    done(answers);</span><br><span class="line">  &#125;</span><br><span class="line">  inquirer.prompt = inquirerPrompt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = mockPrompt;</span><br></pre></td></tr></table></figure>
<p>This is the contents of an inquirer fixture that handles that well. Once you have that, just include it in your test files where you are going to mock the prompts. You’ll also want to include the actual slushfile you’re testing. In this case, imagine there is just one main slushfile to test:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mockPrompt = <span class="built_in">require</span>(<span class="string">'./inquirer-prompt-fixture'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'../slushfile'</span>);</span><br></pre></td></tr></table></figure>
<p>To my taste, I am partial to mocha for a test runner and chai’s expect syntax for assertion. YOu can use whatever you want, but this is what I use.</p>
<p>Here is an example fo a file performing two simple tests:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> chai = <span class="built_in">require</span>(<span class="string">'chai'</span>), <span class="comment">//chai for assertion</span></span><br><span class="line">  gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>), </span><br><span class="line">  mockGulpDest = <span class="built_in">require</span>(<span class="string">'mock-gulp-dest'</span>)(gulp), <span class="comment">//here is our dest stub</span></span><br><span class="line">  expect = chai.expect; <span class="comment">//I use expect, but I dont expect(you).to.also()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//this is to mock inquirer</span></span><br><span class="line"><span class="keyword">var</span> mockPrompt = <span class="built_in">require</span>(<span class="string">'./inquirer-prompt-fixture'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//and the thing we are testing</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'../slushfile'</span>);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'your awesome module!!!'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  describe(<span class="string">'taskname'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//before each of these mocks, I need to provide mock data for what might have been responses</span></span><br><span class="line">    beforeEach(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">      mockPrompt(&#123;</span><br><span class="line">        appName: <span class="string">'test-app'</span>,</span><br><span class="line">        userName: <span class="string">'the-simian'</span>,</span><br><span class="line">        authorName: <span class="string">'Fancypants Harlin'</span>,</span><br><span class="line">        authorEmail: <span class="string">'derp@derp.derp'</span>,</span><br><span class="line">        appDescription: <span class="string">'some description'</span>,</span><br><span class="line">        moveon: <span class="literal">true</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    it(<span class="string">'should make a readme'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(done)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">assertDirectories</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mockGulpDest.assertDestContains(<span class="string">'README.md'</span>);</span><br><span class="line">        done();</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//here's the tricky part....</span></span><br><span class="line">      gulp</span><br><span class="line">        .start(<span class="string">'default'</span>)</span><br><span class="line">        .once(<span class="string">'task_stop'</span>, assertDirectories);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'should make a package.json'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(done)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">assertDirectories</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mockGulpDest.assertDestContains(<span class="string">'package.json'</span>);</span><br><span class="line">        done();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      gulp</span><br><span class="line">        .start(<span class="string">'default'</span>)</span><br><span class="line">        .once(<span class="string">'task_stop'</span>, assertDirectories);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Now for a description of the tricky part. The file writing is essentially an async process. You’ll need to use a testing framework that can elegantly handle an async assertion with a callback. In this case, its idiomatic in <code>mocha</code> to use done in this manner. You can use <code>gulp.start(&#39;yourtaskname&#39;)</code> to kick off a stask, but the very important part is that you attach the assertion to the handler of <code>task_stop</code>. Be wary, you might see <code>on(&#39;finish&#39;)</code> , <code>on(&#39;stop&#39;)</code> or other variants in other folk’s code. If you use <code>on</code>, you might get some errors in your runner, such as</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: <span class="keyword">done</span>() called multiple <span class="built_in">times</span></span><br></pre></td></tr></table></figure>
<p>Or if you attach to a differnt event,  your runner will fail because it times out, because the asserting function never gets called at all (and hence the <code>done</code> function never is called).</p>
<p>To test, I cam calling my testing method from gulp. Its pretty straightforward in the gulpfile.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> istanbul = <span class="built_in">require</span>(<span class="string">'gulp-istanbul'</span>);</span><br><span class="line"><span class="keyword">var</span> mocha = <span class="built_in">require</span>(<span class="string">'gulp-mocha'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">(cb)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> mochaOpts = &#123;</span><br><span class="line">    reporter: <span class="string">'nyan'</span> <span class="comment">//cool-mode</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">runner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    gulp</span><br><span class="line">      .src([<span class="string">'./test/*.js'</span>])</span><br><span class="line">      .pipe(mocha(mochaOpts))</span><br><span class="line">      .pipe(istanbul.writeReports())</span><br><span class="line">      .on(<span class="string">'end'</span>, cb);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  gulp</span><br><span class="line">    .src([<span class="string">'./slushfile.js'</span>])</span><br><span class="line">    .pipe(istanbul())</span><br><span class="line">    .pipe(istanbul.hookRequire())</span><br><span class="line">    .on(<span class="string">'finish'</span>, runner);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'test'</span>, test)</span><br></pre></td></tr></table></figure>
<p>So to actually run the test, I call</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp test</span><br></pre></td></tr></table></figure>
<p>I always use the nyan cat reporter, because it delights me. </p>
<img src="/images/slush-howto/slide-cat.gif" title="How I feel testing code">
<p>No judging here.<br>Watch that kitty surf that poptart!!!</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">22</span>:<span class="number">37</span>:<span class="number">41</span>] Starting <span class="string">'test'</span>...</span><br><span class="line">[<span class="number">22</span>:<span class="number">37</span>:<span class="number">41</span>] Starting <span class="string">'default'</span>...</span><br><span class="line">[<span class="number">22</span>:<span class="number">37</span>:<span class="number">41</span>] Finished <span class="string">'default'</span> after <span class="number">16</span> ms</span><br><span class="line">readme</span><br><span class="line">[<span class="number">22</span>:<span class="number">37</span>:<span class="number">41</span>] Starting <span class="string">'default'</span>...</span><br><span class="line">[<span class="number">22</span>:<span class="number">37</span>:<span class="number">41</span>] Finished <span class="string">'default'</span> after <span class="number">5.07</span> ms</span><br><span class="line">package~|_( ^ .^)</span><br><span class="line"> <span class="number">2</span>   -_-_,------,</span><br><span class="line"> <span class="number">0</span>   -_-_|   /\_/\</span><br><span class="line"> <span class="number">0</span>   -_-^|__( ^ .^)</span><br><span class="line">     -_-  <span class="string">""</span>  <span class="string">""</span></span><br><span class="line"></span><br><span class="line">  <span class="number">2</span> passing (<span class="number">36</span>ms)</span><br><span class="line"></span><br><span class="line">-------------------------|-----------|-----------|-----------|-----------|</span><br><span class="line">File                     |   % Stmts |% Branches |   % Funcs |   % Lines |</span><br><span class="line">-------------------------|-----------|-----------|-----------|-----------|</span><br><span class="line">   your-module-name\     |     <span class="number">80.65</span> |     <span class="number">40.74</span> |        <span class="number">80</span> |     <span class="number">80.65</span> |</span><br><span class="line">      slushfile.js       |     <span class="number">80.65</span> |     <span class="number">40.74</span> |        <span class="number">80</span> |     <span class="number">80.65</span> |</span><br><span class="line">-------------------------|-----------|-----------|-----------|-----------|</span><br><span class="line">All files                |     <span class="number">80.65</span> |     <span class="number">40.74</span> |        <span class="number">80</span> |     <span class="number">80.65</span> |</span><br><span class="line">-------------------------|-----------|-----------|-----------|-----------|</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">=============================== Coverage summary ===============================</span><br><span class="line">Statements   : <span class="number">80.65</span>% ( <span class="number">25</span>/<span class="number">31</span> )</span><br><span class="line">Branches     : <span class="number">40.74</span>% ( <span class="number">11</span>/<span class="number">27</span> )</span><br><span class="line">Functions    : <span class="number">80</span>% ( <span class="number">4</span>/<span class="number">5</span> )</span><br><span class="line">Lines        : <span class="number">80.65</span>% ( <span class="number">25</span>/<span class="number">31</span> )</span><br><span class="line">================================================================================</span><br><span class="line">[<span class="number">22</span>:<span class="number">37</span>:<span class="number">42</span>] Finished <span class="string">'test'</span> after <span class="number">734</span> ms</span><br></pre></td></tr></table></figure>
<p>Oh nice! We got two passing tests! Could use a few more though :)</p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/slush-howto/slush_test.png">
<p>One thing I’ve noticed while looking at the generators for both yeoman and slush, is that overall, they tend to be undertested. I think this is for two reasons. Firstly, I think many folks consider this kind of dev tool to not be, generally speaking, differnt from production code. Its a tool to assist a dev work, and not necessarily subject to the same level of testing rigor. I think anothe reason is that testing file IO is fundamentally much more challengin then a typical unit test.</p>]]>
    
    </summary>
    
      <category term="slush, javascript, TDD, testing, scaffolding, generator" scheme="http://simiansblog.com/tags/slush-javascript-TDD-testing-scaffolding-generator/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Lets Make a Basic Slush Generator: Part I]]></title>
    <link href="http://simiansblog.com/2015/03/29/lets-make-a-basic-slush-generator/"/>
    <id>http://simiansblog.com/2015/03/29/lets-make-a-basic-slush-generator/</id>
    <published>2015-03-30T04:09:52.000Z</published>
    <updated>2015-04-21T05:10:51.000Z</updated>
    <content type="html"><![CDATA[<img src="/images/slush-howto/slushlogo.png">
<p>I’ve been using gulp for a while now, and it has become my go-to build system. I have also spent a lot of time trying my very best to getused to using generators regularly in my workflow. I gave talk some time ago about Yeoman, which was a seemingly obvious first choice for a generator.</p>
<p>As I’ve used gulp more and more, I’ve appreciated its direct simplicity. Its a quick, streaming build system, and I find I am using it more and mor eon a regular basis to solve problems. Yeoman, while an excellent tool is something I’ve felt like when I want to really customize something to my liking, can be a bit of work. I was really excited when I came across Slush.js</p>
<a id="more"></a>
<p>Its seriously hard to believe that was actually a year ago!</p>
<p><img src="http://okcjs.com/images/posters/2014-feb-yeoman.jpg" alt="My Yeoman Talk"></p>
<h2 id="About_Slush">About Slush</h2><p>Slush can best be summarized by the info on the website</p>
<blockquote><p>Slush is a tool to be able to use Gulp for project scaffolding.<br>… a tool to help you generate new project structures to get you up and running with your new project in a matter of seconds.<br>Slush does not contain anything “out of the box”, except the ability to locate installed slush generators and to run them with <a href="https://www.npmjs.com/package/liftoff" target="_blank" rel="external">liftoff</a>.</p>
<footer><strong>https://github.com/slushjs/slush</strong></footer></blockquote>
<p>OK. perfect! All the scaffolding goodness I want, but with gulp as the core mechanism to get stuff done.</p>
<p>I’m ready to make a scaffold. The website spells it out pretty straightforward.</p>
<p>You need <code>gulp</code> and <code>slush</code><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g slush</span><br><span class="line">npm install -g gulp</span><br><span class="line">npm install -g slush-generator</span><br></pre></td></tr></table></figure></p>
<p>If you’ve used Yeoman, you know there’s a <code>generator-generator</code>. That helps you generate , well ..generators! This is like the <code>npm init</code> of slush. Its how we are going to kick off our new slush project.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slush generator</span><br></pre></td></tr></table></figure>
<p>You will be asked things, not unlike when you run <code>npm init</code>. Fill out the project name, the decription, your name and stuff like that. Consider letting it replace your readme and your package.json. The scaffolded readme is handy and the scaffolded package.json will have just about everything you need. Also just be aware that the scaffold will handle the <code>slush</code> prefix for you. If your project is <code>slush-radgenerator</code>, just call it <code>radgenerator</code>.</p>
<p>The fully scaffolded project is really nice. It includes your gitignore, liscence file, travis file and a number of other things for you.</p>
<p>Here’s where we start really making this thing work…</p>
<p>Open the file called <code>slushfile.js</code>. You’ll notice this essentially bears a very strong resembelance to a <code>gulpfile.js</code>. That’s because this basically <em>is</em> a gulpfile, that is using inquirer to ask you questions. Its that simple. Before we do any analysis and start plucking this project apart, lets do a quick test.</p>
<p>First go to the generated project directory and link it.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm link</span><br></pre></td></tr></table></figure>
<p>Then go make some new folder and run your generator</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slush your-generator-name-here</span><br></pre></td></tr></table></figure>
<p>You will basically run the absolute default generator stuff. It should scaffold a small project.</p>
<p>Here is me making a non-project taht could be about basketballs</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">? What is the name of your project? ballz</span><br><span class="line">? What is the description? Lets all <span class="keyword">do</span> things with our balls!</span><br><span class="line">? What is the version of your project? <span class="number">6.6</span>.<span class="number">6</span></span><br><span class="line">? What is the author name? (Jesse Harlin)</span><br></pre></td></tr></table></figure>
<p>Actually with inquirer it looks very nice, like this:<br><img src="/images/slush-howto/ballz.png"></p>
<p>Of course not much is gonna happen yet.</p>
<p>If you look at the code, things are really pretty straighforward. Its refreshing.</p>
<ol>
<li>Ask questions with Inquirer.js.</li>
<li>Take the answers and pass them to a callback.</li>
<li>Do stuff. Template Stuff.</li>
</ol>
<p>Check it out, logging the json from the answers you can see exactly what inquirer is really doing, a simple question with a callback.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//every inquirer statement is made like this.</span></span><br><span class="line">inquirer.prompt( questions, callback )</span><br></pre></td></tr></table></figure>
<p>And this is all driven by this simple bit of JSON<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> prompts = [&#123;</span><br><span class="line">  name: <span class="string">'appName'</span>,</span><br><span class="line">  message: <span class="string">'What is the name of your project?'</span>,</span><br><span class="line">  <span class="keyword">default</span>: defaults.appName</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">  name: <span class="string">'appDescription'</span>,</span><br><span class="line">  message: <span class="string">'What is the description?'</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">  name: <span class="string">'appVersion'</span>,</span><br><span class="line">  message: <span class="string">'What is the version of your project?'</span>,</span><br><span class="line">  <span class="keyword">default</span>: <span class="string">'0.1.0'</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">  name: <span class="string">'authorName'</span>,</span><br><span class="line">  message: <span class="string">'What is the author name?'</span>,</span><br><span class="line">  <span class="keyword">default</span>: defaults.authorName</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">  name: <span class="string">'authorEmail'</span>,</span><br><span class="line">  message: <span class="string">'What is the author email?'</span>,</span><br><span class="line">  <span class="keyword">default</span>: defaults.authorEmail</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">  name: <span class="string">'userName'</span>,</span><br><span class="line">  message: <span class="string">'What is the github username?'</span>,</span><br><span class="line">  <span class="keyword">default</span>: defaults.userName</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">  type: <span class="string">'confirm'</span>,</span><br><span class="line">  name: <span class="string">'moveon'</span>,</span><br><span class="line">  message: <span class="string">'Continue?'</span></span><br><span class="line">  &#125;];</span><br></pre></td></tr></table></figure></p>
<p>Which makes these qppear in the console:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">? What is the name of your project? ballz</span><br><span class="line">? What is the description? Some description</span><br><span class="line">? What is the version of your project? <span class="number">6.6</span>.<span class="number">6</span></span><br><span class="line">? What is the author name? Jesse Harlin</span><br><span class="line">? What is the author email? harlinjesse@gmail.com</span><br><span class="line">? What is the github username? Jesse_Harlin</span><br><span class="line">? Continue? Yes</span><br></pre></td></tr></table></figure></p>
<p>Yielding this JSON..<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  appName: <span class="string">'ballz'</span>,</span><br><span class="line">  appDescription: <span class="string">'Some description'</span>,</span><br><span class="line">  appVersion: <span class="string">'6.6.6'</span>,</span><br><span class="line">  authorName: <span class="string">'Jesse Harlin'</span>,</span><br><span class="line">  authorEmail: <span class="string">'harlinjesse@gmail.com'</span>,</span><br><span class="line">  userName: <span class="string">'Jesse_Harlin'</span>,</span><br><span class="line">  moveon: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Nice.<br>And you can just make templates with that.</p>
<p>In case you’re wondering, the <code>defaults</code> object you see above is just an object created elsewhere in the code that provides some sensible default values for the string of questions. You can put whatever you what there.</p>
<p>I want to point out that <a href="https://github.com/SBoudrias/Inquirer.js/" target="_blank" rel="external">inquirer</a> has some very very handy features. Its the same tool that Yeoman uses, if you’re familiar. You can do a lot of cool things like, have folks <a href="https://github.com/SBoudrias/Inquirer.js/#list----type-list-" target="_blank" rel="external">select from lists</a>, <a href="https://github.com/SBoudrias/Inquirer.js/#checkbox----type-checkbox-" target="_blank" rel="external">check items in a list</a> they want and stuff like that. It all looks really nice. All you really must do it change the <code>type</code> of question being asked, and then provide some options, depending on the type, like provide choices for a list of things to select.</p>
<p>The question obejct is <a href="https://github.com/SBoudrias/Inquirer.js/#question" target="_blank" rel="external">fully documented here</a>.</p>
<p>In the boilerplate, you can see what happens after the questions..</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!answers.moveon) &#123;</span><br><span class="line">  <span class="keyword">return</span> done();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">answers.appNameSlug = _.slugify(answers.appName);</span><br></pre></td></tr></table></figure>
<p>The function <code>done()</code> is just the callback. That means the first few lines, before the gulp statement are just to handle situations where no answers were provided or to clean up the project name fromt he first question. Big picture is that, you’d handle all data manipulation before doing templating here.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">gulp</span><br><span class="line">  .src(__dirname + <span class="string">'/templates/**'</span>)</span><br><span class="line">  .pipe(template(answers))</span><br><span class="line">  .pipe(rename(<span class="function"><span class="keyword">function</span> <span class="params">(file)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (file.basename[<span class="number">0</span>] === <span class="string">'_'</span>) &#123;</span><br><span class="line">      file.basename = <span class="string">'.'</span> + file.basename.slice(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;))</span><br><span class="line">  .pipe(conflict(<span class="string">'./'</span>))</span><br><span class="line">  .pipe(gulp.dest(<span class="string">'./'</span>))</span><br><span class="line">  .pipe(install())</span><br><span class="line">  .on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    done();</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p>Here is the meat and potatoes. We go to templates, grab <em>everything</em>, template it all, and move it to the destination folder - which is what you are scaffolding. Simple. Of course nothing is happening simply because theres nothing to template. The template folder starts empty.</p>
<p>Try this, throw a quick file in there. I made a markdown file called <code>example.md</code>. with the contents:</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="header">#&lt;%= appName %&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="header">##About</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">%=</span> <span class="attribute">appDescription</span> %&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="header">###Author</span></span><br><span class="line">Name: <span class="xml"><span class="tag">&lt;<span class="title">%=</span> <span class="attribute">authorName</span> %&gt;</span></span></span><br><span class="line">Email: <span class="xml"><span class="tag">&lt;<span class="title">%=</span> <span class="attribute">authorEmail</span> %&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>Run the generator again.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">? What is the description? Bouncy, happy, glorious, scrumtrelescant balls! Basket Balls! Bowling Balls! Redball!</span><br><span class="line">? What is the version of your project? <span class="number">0.1</span>.<span class="number">0</span></span><br><span class="line">? What is the author name? Jesse Harlin</span><br><span class="line">? What is the author email? harlinjesse@gmail.com</span><br><span class="line">? What is the github username? the-simian</span><br><span class="line">? Continue? Yes</span><br></pre></td></tr></table></figure>
<p>These anspwers make a file with these contents</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="header">#ballz</span></span><br><span class="line"></span><br><span class="line"><span class="header">##About</span></span><br><span class="line">Bouncy, happy, glorious, scrumtrelescant balls! Basket Balls! Bowling Balls! Redball!</span><br><span class="line"></span><br><span class="line"><span class="header">###Author</span></span><br><span class="line">Name: Jesse Harlin</span><br><span class="line">Email: harlinjesse@gmail.com</span><br></pre></td></tr></table></figure>
<p>How simple is that? In tis case we are using <code>gulp-template</code> as the module to handle templating. Its a very common syntax, sort o flike what <code>lodash</code> uses. I suppose there is no reason a developer couldn’t use really anything she wanted to template with.</p>
<p>At this point, really you just template your project, like you would any project! Its probably good to make templates for a <code>readme.md</code>, a <code>package.json</code>, a <code>.gitignore</code>, and so on!</p>
<p>Perhaps in another post, I will tlak more about some strategies for slushfile project organization. If tis project grows, especially if we add subgenerators - I would venture that a single slushfile would be a bad idea.</p>
<p>Have fun getting slushy!</p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/slush-howto/slushlogo.png">
<p>I’ve been using gulp for a while now, and it has become my go-to build system. I have also spent a lot of time trying my very best to getused to using generators regularly in my workflow. I gave talk some time ago about Yeoman, which was a seemingly obvious first choice for a generator.</p>
<p>As I’ve used gulp more and more, I’ve appreciated its direct simplicity. Its a quick, streaming build system, and I find I am using it more and mor eon a regular basis to solve problems. Yeoman, while an excellent tool is something I’ve felt like when I want to really customize something to my liking, can be a bit of work. I was really excited when I came across Slush.js</p>]]>
    
    </summary>
    
      <category term="generator" scheme="http://simiansblog.com/tags/generator/"/>
    
      <category term="gulp" scheme="http://simiansblog.com/tags/gulp/"/>
    
      <category term="javascript" scheme="http://simiansblog.com/tags/javascript/"/>
    
      <category term="scaffolding" scheme="http://simiansblog.com/tags/scaffolding/"/>
    
      <category term="slush" scheme="http://simiansblog.com/tags/slush/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[New Release: Phaser GLGL Loader for Webpack]]></title>
    <link href="http://simiansblog.com/2015/03/28/New-Release-Phaser-GLGL-Loader-for-Webpack/"/>
    <id>http://simiansblog.com/2015/03/28/New-Release-Phaser-GLGL-Loader-for-Webpack/</id>
    <published>2015-03-29T04:11:53.000Z</published>
    <updated>2015-04-06T03:01:26.000Z</updated>
    <content type="html"><![CDATA[<p>You know what sucks? The way phaser loads GLSL files. In that, it doesnt by itself. What also sucks is including code for a totally differnt language as a list of strings in your codebase. Whenever you come across this sort of thing, its usually best to try and store the “nonindigenous code” somewhere sles, like a seperate file. This is especially true if you find it can be templated.</p>
<p>THis is exactly the problem I encountered in Phaser.js, so I made a quick solution.</p>
<a id="more"></a>
<h2 id="Phaser_GLSL_Loader">Phaser GLSL Loader</h2><p><a href="https://travis-ci.org/the-simian/phaser-glsl-loader" target="_blank" rel="external"><img src="https://travis-ci.org/the-simian/phaser-glsl-loader.svg" alt="Build Status"></a></p>
<p><a href="https://coveralls.io/r/the-simian/phaser-glsl-loader?branch=master" target="_blank" rel="external"><img src="https://coveralls.io/repos/the-simian/phaser-glsl-loader/badge.svg?branch=master" alt="Coverage Status"></a></p>
<p><a href="https://codeclimate.com/github/the-simian/phaser-glsl-loader" target="_blank" rel="external"><img src="https://codeclimate.com/github/the-simian/phaser-glsl-loader/badges/gpa.svg" alt="Code Climate"></a></p>
<p><a href="https://david-dm.org/the-simian/phaser-glsl-loader" target="_blank" rel="external"><img src="https://david-dm.org/the-simian/phaser-glsl-loader.svg" alt="David-Dm"></a></p>
<p>This is a simple GLSL loader that is meant to work with Phaser and Webpack.</p>
<h2 id="The_Problem:">The Problem:</h2><p>Lets say you’re working in phaser, and you see a really cool looking fragment shader you want to use.</p>
<p><img src="http://i.imgur.com/1xys0Iy.png" alt="Some cool shader"></p>
<p>So you go to the phaser examples, and they show you to integrate your code just like this:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> game = <span class="keyword">new</span> Phaser.Game(<span class="number">800</span>, <span class="number">600</span>, Phaser.AUTO, <span class="string">'phaser-example'</span>, &#123; create: create, update: update &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> filter;</span><br><span class="line"><span class="keyword">var</span> sprite;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  From http://glslsandbox.com/e#20450.0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> fragmentSrc = [</span><br><span class="line">        <span class="string">"precision mediump float;"</span>,</span><br><span class="line">        <span class="string">"uniform vec2      resolution;"</span>,</span><br><span class="line">        <span class="string">"uniform float     time;"</span>,</span><br><span class="line"></span><br><span class="line">        <span class="string">"float size = 0.002;"</span>,</span><br><span class="line"></span><br><span class="line">        <span class="string">"void main( void ) &#123;"</span>,</span><br><span class="line">            <span class="string">"vec2 view = ( gl_FragCoord.xy - resolution / 2.0 ) / ( resolution.y / 2.0);"</span>,</span><br><span class="line">            <span class="string">"float time = time + length(view)*8.;"</span>,</span><br><span class="line">            <span class="string">"vec4 color = vec4(0);"</span>,</span><br><span class="line">            <span class="string">"vec2 center = vec2(0);"</span>,</span><br><span class="line">            <span class="string">"float rotationVelocity = 2.0;"</span>,</span><br><span class="line">            <span class="string">"for( int j = 0; j &lt; 20; j++ ) &#123;"</span>,</span><br><span class="line">                <span class="string">"for( int i = 0; i &lt; 20; i++ ) &#123;"</span>,</span><br><span class="line">                    <span class="string">"float amplitude = ( cos( time / 10.0 ) + sin(  time /5.0 ) ) / 2.0;"</span>,</span><br><span class="line">                    <span class="string">"float angle =   sin( float(j) * time) * rotationVelocity + 2.0 * 3.14 * float(i) / 20.0;"</span>,</span><br><span class="line">                    <span class="string">"center.x = cos( 7.0 * float(j) / 20.0 * 2.0 * 3.14 ) + sin( time / 4.0);"</span>,</span><br><span class="line">                    <span class="string">"center.y = sin( 3.0 * float(j) / 20.0 * 2.0 *  3.14 )+ cos( time / 8.0);"</span>,</span><br><span class="line">                    <span class="string">"vec2 light = center + amplitude * vec2( cos( angle ), sin( angle ));"</span>,</span><br><span class="line">                    <span class="string">"//size = sin( time ) * 0.005;"</span>,</span><br><span class="line">                    <span class="string">"float l = size / length( view - light );"</span>,</span><br><span class="line">                    <span class="string">"vec4 c = vec4( l / 20.0, l, l, 1.0 ) / 5.0;"</span>,</span><br><span class="line">                    <span class="string">"color += c;"</span>,</span><br><span class="line">                <span class="string">"&#125;"</span>,</span><br><span class="line">            <span class="string">"&#125;"</span>,</span><br><span class="line">            <span class="string">"gl_FragColor = color;"</span>,</span><br><span class="line">        <span class="string">"&#125;"</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    filter = <span class="keyword">new</span> Phaser.Filter(game, <span class="literal">null</span>, fragmentSrc);</span><br><span class="line">    filter.setResolution(<span class="number">800</span>, <span class="number">600</span>);</span><br><span class="line"></span><br><span class="line">    sprite = game.add.sprite();</span><br><span class="line">    sprite.width = <span class="number">800</span>;</span><br><span class="line">    sprite.height = <span class="number">600</span>;</span><br><span class="line"></span><br><span class="line">    sprite.filters = [ filter ];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    filter.update();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Man, what mess! Wouldnt it be awesome if you could just put the shader into a seperate file and load it that way?</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fragmentSrc = <span class="built_in">require</span>(<span class="string">'../shaders/cubething.frag'</span>),</span><br></pre></td></tr></table></figure>
<p>You could cut all that code out into a simple require statement! That is what this loader is for.</p>
<h2 id="The_Solution">The Solution</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev phaser-glsl-loader</span><br></pre></td></tr></table></figure>
<p>First, you need to add the loader to your list of loaders, most likely in your <code>webpack.config.js</code> file.</p>
<p>Something like this:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> glFragmentLoader = <span class="built_in">require</span>(<span class="string">'phaser-glsl-loader'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.frag$/i</span>,</span><br><span class="line">        loader: <span class="string">'gl-fragment-loader'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  resolveLoader: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">'gl-fragment-loader'</span>: glFragmentLoader,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Then you’ll be able to reference external files, instead of basically including a large array of strings!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>You know what sucks? The way phaser loads GLSL files. In that, it doesnt by itself. What also sucks is including code for a totally differnt language as a list of strings in your codebase. Whenever you come across this sort of thing, its usually best to try and store the “nonindigenous code” somewhere sles, like a seperate file. This is especially true if you find it can be templated.</p>
<p>THis is exactly the problem I encountered in Phaser.js, so I made a quick solution.</p>]]>
    
    </summary>
    
      <category term="game development" scheme="http://simiansblog.com/tags/game-development/"/>
    
      <category term="javascript" scheme="http://simiansblog.com/tags/javascript/"/>
    
      <category term="node" scheme="http://simiansblog.com/tags/node/"/>
    
      <category term="phaser" scheme="http://simiansblog.com/tags/phaser/"/>
    
      <category term="webpack" scheme="http://simiansblog.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Thunder Plains 2014 Videos]]></title>
    <link href="http://simiansblog.com/2015/01/18/ThunderPlains_Video/"/>
    <id>http://simiansblog.com/2015/01/18/ThunderPlains_Video/</id>
    <published>2015-01-18T18:00:00.000Z</published>
    <updated>2015-04-06T03:14:41.000Z</updated>
    <content type="html"><![CDATA[<p>After a lot of time spend, I’ve finally finished editing all of the Thunder Plains videos from 2014. You can find them all <a href="https://www.youtube.com/watch?v=oAgO9sJ7r54&amp;list=PLdW0ayjzW_LCC4wYjQkivRl8QK4EvZ3i_" target="_blank" rel="external">online</a></p>
<h2 id="Thunder_Plains_2014_PLaylist">Thunder Plains 2014 PLaylist</h2><iframe width="100%" height="525" src="https://www.youtube.com/embed/videoseries?list=PLdW0ayjzW_LCC4wYjQkivRl8QK4EvZ3i_" frameborder="0" allowfullscreen></iframe>

<a id="more"></a>
<h2 id="The_16_Videos">The 16 Videos</h2><ol>
<li><a href="https://www.youtube.com/watch?v=oAgO9sJ7r54&amp;list=PLdW0ayjzW_LCC4wYjQkivRl8QK4EvZ3i_&amp;index=1" target="_blank" rel="external">Luke Crouch - Web For America [ Thunder Plains 2014 ]</a></li>
<li><a href="https://www.youtube.com/watch?v=A8G6OBFTYk4&amp;list=PLdW0ayjzW_LCC4wYjQkivRl8QK4EvZ3i_&amp;index=2" target="_blank" rel="external">Aaron Murray - Real World React.js [ Thunder Plains 2014 ]</a></li>
<li><a href="https://www.youtube.com/watch?v=Zu2kanX5l9U&amp;list=PLdW0ayjzW_LCC4wYjQkivRl8QK4EvZ3i_&amp;index=3" target="_blank" rel="external">Waylon Flinn - Making Magic with Node.js and Redis [ Thunder Plains 2014 ]</a></li>
<li><a href="https://www.youtube.com/watch?v=T97mEDEVUMk&amp;list=PLdW0ayjzW_LCC4wYjQkivRl8QK4EvZ3i_&amp;index=4" target="_blank" rel="external">Josh Bavari - Mobile Applications with JS and Ionic [ Thunder Plains 2014 ]</a></li>
<li><a href="https://www.youtube.com/watch?v=2h7-nHFV90Y&amp;list=PLdW0ayjzW_LCC4wYjQkivRl8QK4EvZ3i_&amp;index=5" target="_blank" rel="external">Kassandra Perch - NodeBots Wearables: Javascripting Your Wardrobe [ Thunderplains 2014 ]</a></li>
<li><a href="https://www.youtube.com/watch?v=iCgi4DIwVts&amp;list=PLdW0ayjzW_LCC4wYjQkivRl8QK4EvZ3i_&amp;index=6" target="_blank" rel="external">Tracy Hinds - Use Your Words! [ Thunder Plains 2014 ]</a></li>
<li><a href="https://www.youtube.com/watch?v=rfCeOKpMYns&amp;list=PLdW0ayjzW_LCC4wYjQkivRl8QK4EvZ3i_&amp;index=7" target="_blank" rel="external">Eric Schoffstall - Genome.js [ Thunder Plains 2014 ]</a></li>
<li><a href="https://www.youtube.com/watch?v=nWH-hEmDJjA&amp;list=PLdW0ayjzW_LCC4wYjQkivRl8QK4EvZ3i_&amp;index=8" target="_blank" rel="external">Jenn Schiffer - Your Grandparents Probably Didn’t Have Node [ Thunder Plains 2014 ]</a></li>
<li><a href="https://www.youtube.com/watch?v=-Mg2xj8U6J8&amp;list=PLdW0ayjzW_LCC4wYjQkivRl8QK4EvZ3i_&amp;index=9" target="_blank" rel="external">Jennifer Wadella - The Importance of Building Developer Communities [ Thunder Plains 2014 ]</a></li>
<li><a href="https://www.youtube.com/watch?v=wONjcD9ObpA&amp;list=PLdW0ayjzW_LCC4wYjQkivRl8QK4EvZ3i_&amp;index=10" target="_blank" rel="external">Jeremy Green - Supercharge Your Productivity with Ember.js [ Thunder Plains 2014 ]</a></li>
<li><a href="https://www.youtube.com/watch?v=SZJYlAq3v4E&amp;index=11&amp;list=PLdW0ayjzW_LCC4wYjQkivRl8QK4EvZ3i_" target="_blank" rel="external">Derick Bailey - Johnny Five is Alive! [ Thunder Plains 2014 ]</a></li>
<li><a href="https://www.youtube.com/watch?v=wAQsVv9Yedo&amp;index=12&amp;list=PLdW0ayjzW_LCC4wYjQkivRl8QK4EvZ3i_" target="_blank" rel="external">Gordon Bockus - Building Massive Angular Apps [ Thunder Plains 2014 ]</a></li>
<li><a href="https://www.youtube.com/watch?v=S3O8QcovtSs&amp;index=13&amp;list=PLdW0ayjzW_LCC4wYjQkivRl8QK4EvZ3i_" target="_blank" rel="external">Jeff French - Awesomify Your Dev Environment with Docker + Vagrant [ Thunder Plains 2014 ]</a></li>
<li><a href="https://www.youtube.com/watch?v=FTOojTR1KBw&amp;index=14&amp;list=PLdW0ayjzW_LCC4wYjQkivRl8QK4EvZ3i_" target="_blank" rel="external">Chris Dickinson - Better Living through Control Flow Graph Generation [ Thunder Plains 2014 ]</a></li>
<li><a href="https://www.youtube.com/watch?v=4vccPZcq08w&amp;index=15&amp;list=PLdW0ayjzW_LCC4wYjQkivRl8QK4EvZ3i_" target="_blank" rel="external">Adam Baldwin - Node.js Security Live [ Thunder plains 2014 ]</a></li>
<li><a href="https://www.youtube.com/watch?v=ZwEXoFNrHwA&amp;index=16&amp;list=PLdW0ayjzW_LCC4wYjQkivRl8QK4EvZ3i_" target="_blank" rel="external">Chris Williams - Democratizing Hardware [ Thunder Plains 2014 ]</a></li>
</ol>
<p>I hope you enjoy them. They took a very long time to edit, over the course of some months.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>After a lot of time spend, I’ve finally finished editing all of the Thunder Plains videos from 2014. You can find them all <a href="https://www.youtube.com/watch?v=oAgO9sJ7r54&amp;list=PLdW0ayjzW_LCC4wYjQkivRl8QK4EvZ3i_">online</a></p>
<h2 id="Thunder_Plains_2014_PLaylist">Thunder Plains 2014 PLaylist</h2><iframe width="100%"  height="525" src="https://www.youtube.com/embed/videoseries?list=PLdW0ayjzW_LCC4wYjQkivRl8QK4EvZ3i_" frameborder="0" allowfullscreen></iframe>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Talk: Angular with React.js]]></title>
    <link href="http://simiansblog.com/2014/12/16/angular-and-react-talk/"/>
    <id>http://simiansblog.com/2014/12/16/angular-and-react-talk/</id>
    <published>2014-12-16T17:30:00.000Z</published>
    <updated>2015-03-19T10:43:29.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Angular_with_React-js">Angular with React.js</h1><h2 id="About">About</h2><p>I recently gave a talk at the local Javascript user group about my experiences with using Angular and React in a similar project. In some ways, this was a technical talk, covering various ways to integrate an external lib (React) properly into the context of a very differnt framework (Angular). However, much of the talk really centered around the role of abstraction in a project, and learning how to assess the tradeoffs of various tools one might adopt.</p>
<img src="/images/posters/2014-dec-angular-with-reactjs.png" width="700" title="Angular w/ React.js Angular with React.js">
<h2 id="The_code">The code</h2><p>You can find the repo for the talk <a href="https://github.com/the-simian/OKCJS-December-2014-Angular-and-React" target="_blank" rel="external">here</a></p>
<h2 id="Slides">Slides</h2><p>Here are the slides if you’d like to see them<br>  <iframe src="//slides.com/jesseharlin/deck/embed" width="100%" height="420" scrolling="no" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen><br>    </iframe></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Angular_with_React-js">Angular with React.js</h1><h2 id="About">About</h2><p>I recently gave a talk at the local Javascript user gro]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Flirting with Gulp: Part 2]]></title>
    <link href="http://simiansblog.com/2014/04/01/flirting_with_gulp_part_2/"/>
    <id>http://simiansblog.com/2014/04/01/flirting_with_gulp_part_2/</id>
    <published>2014-04-01T17:00:00.000Z</published>
    <updated>2015-04-06T03:38:38.000Z</updated>
    <content type="html"><![CDATA[<p>At this point I’ve played with gulp enough to make the decision that I’d like to consider moving from grunt to gulp. I respect there is a lot of trepidation about this in the community. I can hear their objection. I sounds like an old saying we all heard around here as youngsters:</p>
<blockquote><p>If it ain’t broke, don’t fix it.</p>
</blockquote>
<p>At the same time, broke and “ain’t broke” is a fairly binary way to see a system. Where does functional, yet unoptimized lie? Where does “working, but unscaleable” sit? Any software engineer knows there are often multiple approaches to solving a problem, and there is often merit to improving a system, for the sake of organization, optimization, maintenance and stability. I think switching to gulp is worth the work investment.</p>
<p>You can bet I have a massive Gruntfile to rework. Every journey begins with the smallest step.</p>
<a id="more"></a>
<p>First we do the node dance. Install Gulp!</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g gulp</span><br></pre></td></tr></table></figure>
<p>And then:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev gulp</span><br></pre></td></tr></table></figure>
<p>Now I add a gulpfile.js to my project, and </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br></pre></td></tr></table></figure>
<p>so far, so simple.</p>
<p>now I actually need STUFF. Gulp plugins. Thankfully here is many. I just follwoed the same procedure for each</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev gulp-changed</span><br><span class="line">npm install --save-dev gulp-concat</span><br><span class="line">npm install --save-dev gulp-copy</span><br><span class="line">npm install --save-dev gulp-stylus</span><br><span class="line">npm install --save-dev gulp-clean</span><br><span class="line">npm install --save-dev gulp-htmlmin</span><br><span class="line">npm install --save-dev gulp-cssmin</span><br><span class="line">npm install --save-dev gulp-uglify</span><br></pre></td></tr></table></figure>
<p>If you used it in Grunt, most likely it is also in gulp. Notice I didnt add watch? That’s already included in gulp. Awesome!</p>
<p>Now one little thing you can do is explicitly include each plugin. That is well and good. Actually, if you start breaking your files up for organizational reasons (protip: we will) that’s the way to go. If you have a shorter gulpfile.js, or just want to include everythign easily, heres a little trick</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev matchdep</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">function loadModule(module) &#123;</span><br><span class="line">    global[module.replace(/^gulp-/, '')] = require(module);</span><br><span class="line">&#125;</span><br><span class="line">require('matchdep')</span><br><span class="line">    .filterDev('gulp-*')</span><br><span class="line">    .forEach(loadModule);</span><br><span class="line">```    </span><br><span class="line">    </span><br><span class="line">Neat, huh? Autoloads every gulp plugin, since they are conventionally named. Globbing is neato!</span><br><span class="line"></span><br><span class="line">Again, this is more practical, if you're going to stick to one file. </span><br><span class="line"></span><br><span class="line">Now here is what is interesting. I'm immediately seeing pros to Gulp. I'll set up a simple script that goes into a series of theme folders, and makes basically a series of theme stylesheets. </span><br><span class="line"></span><br><span class="line">In grunt I have a function declared somewhere in my options object that I use throughout the file. I had to do it like this because Grunt is massively configuration-heavy.;</span><br><span class="line"></span><br><span class="line">Its someting like this:</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">options.themeList = function themeList(themes) &#123;</span><br><span class="line">            var obj = &#123;&#125;;</span><br><span class="line">            for (var i = 0, ii = themes.length; i &lt; ii; i++) &#123;</span><br><span class="line">                var root = 'src/public/styles/themes/' + themes[i];</span><br><span class="line">                obj[root + '/theme.css'] = root + '/theme.styl';</span><br><span class="line">            &#125;</span><br><span class="line">            return obj;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>and somewhere I have a list of themes corresponding to folders, in my case I have 9 total. Lets pretend these are also attached to my session grunt options object. Basically:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">options.themes = [</span><br><span class="line">        <span class="string">'ThemeOne'</span>,</span><br><span class="line">        <span class="string">'ThemeTwo'</span>,</span><br><span class="line">        <span class="string">'ThemeThree'</span>,</span><br><span class="line">        <span class="string">'ThemeFour'</span>,</span><br><span class="line">        <span class="string">'ThemeFive'</span>,</span><br><span class="line">        <span class="string">'ThemeSix'</span>,</span><br><span class="line">        <span class="string">'ThemeSeven'</span>,</span><br><span class="line">        <span class="string">'ThemeEight'</span>,</span><br><span class="line">        <span class="string">'ThemeNine'</span></span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>
<p>And then, this is used in the stylus plugin for Grunt, in the Gruntfile.js</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line">stylus: &#123;</span><br><span class="line">         themes: &#123;</span><br><span class="line">             options: &#123;use: [<span class="built_in">require</span>(<span class="string">'nib'</span>)]&#125; <span class="comment">//some stylus options</span></span><br><span class="line">             files: options.themeList (options.themes)</span><br><span class="line">         &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure>
<p>There are probably simpler, and more elegant ways to do this. Actually, in my actual code there are some minor varitions from this, taht are related to implementation, but this should get the point across, easily. Grunt’s initConfig Method is a big, honkin pile of JSON. Actually, in practice mine had gotton so large that I was looking at strategies to organize it when I stumbled upon Gulp.</p>
<p>I wrote a similar setup in Gulp. I was able to encapsulate the method much more nicely, because Gulp is code-first! Its something like this:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'stylus:themes'</span>, <span class="function"><span class="keyword">function</span> <span class="title">stylusThemes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> themes = options.themes;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">makeThemes</span><span class="params">(themes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, ii = themes.length; i &lt; ii; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> theme = themes[i],</span><br><span class="line">                themeFolder = <span class="string">'src/public/styles/themes/'</span> + theme,</span><br><span class="line">                stylusConfig = &#123;</span><br><span class="line">                    use: [<span class="string">'nib'</span>]</span><br><span class="line">                &#125;;</span><br><span class="line"> </span><br><span class="line">            gulp</span><br><span class="line">                .src(themeFolder + <span class="string">'/theme.styl'</span>)</span><br><span class="line">                .pipe(stylus(stylusConfig))</span><br><span class="line">                .pipe(gulp.dest(themeFolder));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    makeThemes(themes); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>As a side note, I can’t help but reflect upon some of the same organizational issues I encountered whilst working in say, Ext.js. There you have another, really big, configur-ish way to implement a module pattern. Its nice, but when you need to go outside the box, it can be challenging at a glance to figure out where stuff should live. I think theres a very reasonably attraction to tools like node and browserfy, and other very code-first approaches to code organization. I mentioned this in the last post, but in C# land, using more convention over configuration has proven time and time again to be a better way of doing things. I pity the dev using XML instead of FLuent nHibernate to configure nHibernate. It really is much better.</p>
<p>So, there you have it. a Very very slightly not run-of-the mill task cross written on both platforms. To my eyes, the Gulp version is way more maintainable in the long run. However, the story doesn’t end there. I ran the two side by side, just out of curiosity, to see which one is faster. Now, recall, these are pretty big tasks here. These aren’t fired at request time from a client, but are preprocessed to make static resources. The only thing that truly benefits is like a file watch while working in the .stylus files. But, omigosh Gulp is faster.</p>
<p>Here is the Grunt task ( I am using time-grunt to measure the speed):</p>
<img src="/images/gulp/grunt-stylus-speed.png">
<p>Theme names have been hidden to protect the innocent. Just pretend they are named after American Presidents. eg. FranklinPierce\theme.css </p>
<p>Now, here is the same thing in Gulp.</p>
<img src="/images/gulp/gulp-stylus.png">
<p>I had to run it twice to be sure. Did it actually make the files? I looked. Yes, they’re there. That’s literally over 1000 times faster. 1064.891 times faster, to be more accurate.</p>
<p>Wow. I expect huge gains during tasks that run under file watch during development.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>At this point I’ve played with gulp enough to make the decision that I’d like to consider moving from grunt to gulp. I respect there is a lot of trepidation about this in the community. I can hear their objection. I sounds like an old saying we all heard around here as youngsters:</p>
<blockquote><p>If it ain’t broke, don’t fix it.</p>
</blockquote>
<p>At the same time, broke and “ain’t broke” is a fairly binary way to see a system. Where does functional, yet unoptimized lie? Where does “working, but unscaleable” sit? Any software engineer knows there are often multiple approaches to solving a problem, and there is often merit to improving a system, for the sake of organization, optimization, maintenance and stability. I think switching to gulp is worth the work investment.</p>
<p>You can bet I have a massive Gruntfile to rework. Every journey begins with the smallest step.</p>]]>
    
    </summary>
    
      <category term="Gulp, Task Runners, Javascript" scheme="http://simiansblog.com/tags/Gulp-Task-Runners-Javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Using Windows: You Need A Better Console]]></title>
    <link href="http://simiansblog.com/2014/03/07/You-Need-a-Better-Console/"/>
    <id>http://simiansblog.com/2014/03/07/You-Need-a-Better-Console/</id>
    <published>2014-03-07T17:30:00.000Z</published>
    <updated>2015-04-06T03:01:34.000Z</updated>
    <content type="html"><![CDATA[<p>I use a lot of operating systems. Regularly, I use Windows, OSX and Linux. It seems like at work, unless I’m doing somethig with virtual machines, I’m typically on Windows. Now, I am not a fanboy of any particular OS. I believe they all have strengths and weaknesses, and I find I use them differntly, for differnt tasks. One very admitable shortcoming in Windows, is most certainly its console. It Just Sucks™.</p>
<a id="more"></a>
<p>Now if you work in git, you might have installed, at some point, for windows the bash console emulator, Msys Git. Its nice, but not perfect. If you do any node development, you probably have many, many consoles open. Some are bash, some are standard windows. It gets annoying.</p>
<p>Lately I’ve been using Conemu. Its honestly fantastic, and frequently updated. And really resolved the issue of working between worlds. I did a few things to get it set up like I like.</p>
<p>One of my favorite things about the Git console is, admittedly this little feature:</p>
<img src="/images/you_need_a_better_console/Git-Bash-Here.png">
<p>uch a little thing, makes a big differnce.</p>
<p>In conemu, do the following:</p>
<ol>
<li>Open the settings. Either ightclick and select fromt he menu or Win+ Alt + P. Whatever.</li>
</ol>
<img src="/images/you_need_a_better_console/conemu1.png">
<ol>
<li>Go to integration. Make sure the “Conmemu Here” is there, and the command looks correct. Should say someting like “smd -cur_console:n”</li>
</ol>
<img src="/images/you_need_a_better_console/conemu2.png">
<ol>
<li><p>Click Register.</p>
</li>
<li><p>Magic</p>
</li>
</ol>
<img src="/images/you_need_a_better_console/conemu3.png">
<p>You can also do cool stuff like automatically open Conemu with certain tabs open, use differnt themes and a lot of other stuff.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>I use a lot of operating systems. Regularly, I use Windows, OSX and Linux. It seems like at work, unless I’m doing somethig with virtual machines, I’m typically on Windows. Now, I am not a fanboy of any particular OS. I believe they all have strengths and weaknesses, and I find I use them differntly, for differnt tasks. One very admitable shortcoming in Windows, is most certainly its console. It Just Sucks™.</p>]]>
    
    </summary>
    
      <category term="Conemu" scheme="http://simiansblog.com/tags/Conemu/"/>
    
      <category term="Console" scheme="http://simiansblog.com/tags/Console/"/>
    
      <category term="Tools" scheme="http://simiansblog.com/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Flirting with Gulp: Part 1]]></title>
    <link href="http://simiansblog.com/2014/03/06/flirting_with_gulp_part_1/"/>
    <id>http://simiansblog.com/2014/03/06/flirting_with_gulp_part_1/</id>
    <published>2014-03-06T18:00:00.000Z</published>
    <updated>2015-04-06T03:30:11.000Z</updated>
    <content type="html"><![CDATA[<p>Observation: Quality Javascript taskrunners tend to be named after gutteral noises. Fascinating.</p>
<p>I guess lately I’ve been having a sort of love afair with Gulp. Its interesting, considering I actually adopted Grunt fairly recently, just last year. ( I know, I’m late to the party). I picked it up when Grunt 0.4 Came along. I remember it was much nicer than the previous version. Everything was a plugin (rather than builtin), and it made sense to me. Grunt rocked, and still rocks my world. Its so very easy. Theres really only three things you need to know: To pull in the plugins, to configure them declaratively, and to make tasks. Then, you run them. Simple. </p>
<a id="more"></a>
<p>The big thing with grunt, I’ve noticed whilst working with it, is that the declarative JSON…mammoth.. gets pretty big after a while. I’m aware there are strategies for refactoring and organizing your Gruntfiles, i just feel like I often can’t bring myself to find time to just sit and simply refactor my Grunt tasks. So lately, at the shop, we’ve been working on a scaffolding project to help us get up and running on future applications more rapidly. Now is my golden chance to refactor Grunt.. or?</p>
<p>Gulp? Should I explore this as a viable option? Why not?</p>
<p>These tools clearly compete for the exact same ‘job’ in my toolbox. One works off of configuration, the other uses streams; its sort of ‘code-first’. I like that.  I am reminded of when I switched to fluent nHibernate configuration years ago, rather than xml configuration. It really made everything easier to read and compose. Maybe I could achieve similar benefits here. It seems equally simple. Theres four main things, ‘task, watch, src, dest’. That’s really all. Also the modules seem smaller, and the concerns of each seem more seperate. And the most interesting part, is that the tasks seem to run as concurrently as possible. That, plus the fact they are essentialyl streams could result in much faster execution times. I suppose that isn’t as big a deal when you’re doing a preprocessing task, but during a file watch it can be really handy. It can also be handy if there are tasks related to CI.</p>
<p>OK, let’s play.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Observation: Quality Javascript taskrunners tend to be named after gutteral noises. Fascinating.</p>
<p>I guess lately I’ve been having a sort of love afair with Gulp. Its interesting, considering I actually adopted Grunt fairly recently, just last year. ( I know, I’m late to the party). I picked it up when Grunt 0.4 Came along. I remember it was much nicer than the previous version. Everything was a plugin (rather than builtin), and it made sense to me. Grunt rocked, and still rocks my world. Its so very easy. Theres really only three things you need to know: To pull in the plugins, to configure them declaratively, and to make tasks. Then, you run them. Simple. </p>]]>
    
    </summary>
    
      <category term="Gulp, Task Runners, Javascript" scheme="http://simiansblog.com/tags/Gulp-Task-Runners-Javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Orchard CMS: Getting Setup, Part 1, the Non-Source Setup]]></title>
    <link href="http://simiansblog.com/2013/04/05/using_orchard_cms_1/"/>
    <id>http://simiansblog.com/2013/04/05/using_orchard_cms_1/</id>
    <published>2013-04-05T06:00:00.000Z</published>
    <updated>2015-04-06T03:02:13.000Z</updated>
    <content type="html"><![CDATA[<p>Orchard is generally easy to setup. I think there is a larger question about workflow and deployment one has when they’re asking about setup. Really there’s two kinds of people interested in setting up Orchard. For lack of better terminology, I’ll say its either an end-user or a developer. We will be working , as a developer, off of the Orchard Source, but for the sake of completeness I’ll mention how to set up the built version also,as if you were an end-user.</p>
<a id="more"></a>
<h2 id="Prebuilt_Setup">Prebuilt Setup</h2><p>I’m mentioning this here, because this is what you’ll find most often out there on the web. Want to get started in Orchard? Just go get Webmatrix and click install for orchard! Its important to understand what you’re installing here! You’re installing a build of Orchard. This is the small ready-to-deploy version. This is not what you want if you are interested in building modules yourself. This is for absolutely minimal resistance in setup. </p>
<p>First get <a href="http://www.microsoft.com/web/webmatrix/" target="_blank" rel="external">Webmatrix</a>. Its already on version 3! This is really amazing to me. It was just released in 2011, and its made so much progress. Version 2 was out just last September. This particular tool is moving at breakneck speed, and its free.</p>
<p>So once you have Webmatrix, and you’re ready to make a site you go to the App Gallery (formerly Web Gallery).</p>
<img src="/images/orchard/orchard1.png">
<p>Then, you click on the Orchard CMS Button.</p>
<img src="/images/orchard/orchard2.png">
<p>Easy. Click Next a few times, and the installer literally does all the rest.</p>
<img src="/images/orchard/orchard3.png">
<p>Couldn’t be easier, right?</p>
<p>Within seconds of the bar completing, you click OK, and you’ll be prompted in Webmatrix with a folder structure sort of like this:</p>
<img src="/images/orchard/orchard4.png">
<p>More on that later…</p>
<p>And a big giant prompt like this:</p>
<img src="/images/orchard/orchard5.png">
<p>Go ahead and fill this out, you site name and what you want the superuser account to be. Just select Default for the Orchard Recipe. Select SQL Server Compact for data storage.</p>
<p>Now you have a site. Cool! At this point, you’d start configuring it like you need to, possibly install a module or two form the gallery. Probably install a different theme, and so on. Even though this is the non-source setup, you do have some latitude in configuring the project, you can alter the html on the views, namely and possibly fiddle around with some CSS. Don’t expect to do heavy development here though, that’s not what this workflow is really for.</p>
<p>Look at the folder structure for a moment. You are looking at what in the source will be the Orchard.Web project – one of 67 or so projects. You’ll notice that in this built project, you have every module listed in your module folder. It will be like this in the source too, though in Visual Studio you’ll see an aliased folder. Every image you add, and every piece of media you upload ends up, some way in the Media Folder.  Every theme you make or download ends up in the theme folder.  Its generally quite organized.</p>
<p>I want to draw attention to one very important folder: App_Data. Open that. Now drill down Sites –&gt; Default. Look in there. see the Orchard.sdf file? That’s your site. Basically.</p>
<img src="/images/orchard/orchard6.png">
<p>If your site gets completely blown away, you can reinstall it all, and drop that in and all your blog posts, and content will be back. I hope this makes it clear how easy it is to back up an Orchard site, you just really need to account for the Media folder, because it has all your pictures and stuff, and this folder in your Sites.</p>
<p>So at this point, you can put this Orchard install on your server, or push it to Azure or whatever you like. Boom, you installed Orchard. Beyond that its up to you. You might like simply editing posts in the online editor, or you might set up Live Writer to edit them. I’ve written about how to set up Live Writer in the past. Its not hard, and it works well. The bottom line is that I can’t stress the importance of your Media Sites –&gt; Default folders.  Back these up.</p>
<p>Recently, my wife’s blog was spammed to the max. Eventually the attackers were able to bring down the blog. A similar situation in Wordpress or some other system would have really bothered me, but with her we simply backed up the imporant folders, then pulled our personal Orchard build from github, replacing everything. Then? We replaced the Media and Sites—&gt; Default folders.  It was a complete recovery.</p>
<p>Next though, we need to get setup from the source. I’m gearing these tutorials to be used in Visual Studio. Honestly, if you’re a c# developer that’s the way to go. you get all the advantages of your favorite IDE, such as Resharper – and also you can build the project.</p>
<p>We’ll cover that next.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Orchard is generally easy to setup. I think there is a larger question about workflow and deployment one has when they’re asking about setup. Really there’s two kinds of people interested in setting up Orchard. For lack of better terminology, I’ll say its either an end-user or a developer. We will be working , as a developer, off of the Orchard Source, but for the sake of completeness I’ll mention how to set up the built version also,as if you were an end-user.</p>]]>
    
    </summary>
    
      <category term="Orchard CMS, Orchard CMS Tutorial" scheme="http://simiansblog.com/tags/Orchard-CMS-Orchard-CMS-Tutorial/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Orchard CMS: Getting Setup, Part 2, Source Setup and Workflow]]></title>
    <link href="http://simiansblog.com/2013/04/05/using_orchard_cms_2/"/>
    <id>http://simiansblog.com/2013/04/05/using_orchard_cms_2/</id>
    <published>2013-04-05T06:00:00.000Z</published>
    <updated>2015-04-06T03:01:58.000Z</updated>
    <content type="html"><![CDATA[<p>Now that you understand how you can start straight away from an already built project (what Webmatrix provides), I think its best at this point to work henceforth directly from the source. There are a number of reasons for this. </p>
<a id="more"></a>
<p>First of all, there’s not layer of abstraction for you. Starting from the build is great, but there’s a lot of advantages to being able to start form the source, and build it yourself. This gets you in the game. Sometimes , for example there is an older version of a module in the gallery, and you want the latest one, which is available on the modules site. Maybe the way to make a module work, is just a simple fix, and would be easy if you could see the source. In fact, on the subject of modules, the source has many “must have” modules already included in the source drop, such as Tag Cloud, Lucene, Search and others. The built version you can download has been slimmed down for size. This isn’t an issue for use, since we will build ourselves. Since theres a lot already included, this helps you configure very quickly. Maybe you want to make your own module. Seriously, working from the source is the way to go. Plus, most importantly, its much more comfortable to work in Visual Studio. You know your personal arsenal of plugins is working fine, when everything builds and runs, and when you can run all your tests.</p>
<p>There’s a number of ways to acquire the source. If you go to the Orchard project site, they are going to basically walk you through setting up Mercurial, and pulling the source down that way. You don’t necessarily have to do this. Clearly, I recommend using some manner of source control- and if you want to hang with the Orchard team you need to use Hg. That’s well and fine but I’m really into Github, so that’s what I use. If this is what you want to do, just go download the source from codeplex and then start your own repo. From here on out, this will be the main tool that powers all your orchard sites. When you build you can just include and exclude from this. If a site gets messed up, you can make a quick build and override the files. This source won’t overwrite your Media and Site folders; in fact- I put those folders in my .gitignore file. Whatever works for you in terms of deployment and source control is what you should do.</p>
<p>I will add that I keep my personal clone of the orchard source on my local dev machine. Orchard is actually pretty big – well the source is. I suppose that’s a side effect of having so many projects and so much modularity.</p>
<p>Go ahead and explore the Source drop. It should look like the image below (more or less) There’s some things to note here.</p>
<img src="/images/orchard/orchard7.png">
<p>First off there’s a ton of .hg files like hg tags and so on. This is all just stuff Mercurial uses. (Hg is the periodic table abbreviation for Mercury – get it? har har.) Neat.</p>
<p>There is a lib folder. A bunch of third party libraries live there. Orchard uses them. What libraries? Autofac, Clay, Castle Windsor, Nuget, Lucene, Log4Net, jQuery, nHibernate and stuff like that. Basically a ton of flippin’ awesome open source tools you should probably learn about anyways.  Honestly seeing this lib folder was a huge step in helping me decide to adopt Orchard as a core tool in my toolbelt. The Orchard team- they have taste!</p>
<p>Then, of course there are a few .cmd files. These are scripts we utilize to build. Can you guess what the file ClickToBuild does? You probably guessed correctly. It takes this Orchard source, and generates a built project we can use to deploy. It also runs your tests for you. I should mention that you can <em>technically</em> put the source on your server, and it will work. Its also a massive waste of disk space. Don’t do it.</p>
<p>Then finally there is the orchard src itself. Take a good look at how this entire source is laid out. This is par for the course how a good project should be laid out. The source has its own folder, and the parent folder has a lot of ‘meta’ stuff related to the source.</p>
<p>Now look in the source itself, and then open Orchard.Web.</p>
<img src="/images/orchard/orchard8.png">
<p>Look familiar? it’s the same folder structure we saw from the Webmatrix project we got from the Web Platform installer. I’m pointing this out, because this is basically going to be the part that gets deployed, after the build, with some exception. I’ll explain Look in the Modules in this directory.</p>
<img src="/images/orchard/orchard9.png">
<p>Each one of these modules is an entirely separate self contained project. Each has its own code, dependencies, models, controllers – everything. During the build, each module’s dependencies are reduced down, otherwise the final build would be really really big.</p>
<p>Now for the fun part, go back to the src folder and find the .sln file. That’s what Visual Studio Uses. First, hit the collapse all button. You’ll thank me later. Orchard is made up of a ton of smaller projects, one for each of those modules we saw, and of course the core and orchard.web itself. check out the solution explorer.</p>
<img src="/images/orchard/orchard10.png">
<p>There’s only a few projects in the root. the most important ones are Core and Web. Remember when we explored Orchard.Web earlier in the actual windows File explorer? Modules was inside of Orchard.Web. Here it appears outside, and at the top. That is, in fact the exact same folder. Now if you open in VS2010, it becomes more obvious. The folder looks like its opacity has been lowered, as if it’s a ghost folder. Nonetheless, that’s just an alias to the folder in Orchard.Web. Its listed atop for convenience, I assume.  Same case for Specs,Tests, Themes and Tools. Themes, for example is like Modules. The folder actually resides in the startup project, Orchard.Web.</p>
<p>I’m just pointing this out, because at first it confused me. Then I realized how handy that actually was.</p>
<p>So to rehash, these folders are all really located elsewhere:</p>
<p>Modules – Actually is located in Orchard.Web and is literally every extra module you’ve downloaded or added to Orchard, as well as the ones that were already there. This thing is big.<br>Specs + Tests  - These are for unit testing, integrations tests and that sort of thing..<br>Themes – All you themes go here. This is the last stop for overriding the appearance of Orchard. The folder really lives in Orchard.Web<br>Tools – This has testing helpers, and the orchard command line. More on this later.<br>I think more project exploration is in order, and also covering the sparkle magic that is the orchard command line environment. But that is for another day!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Now that you understand how you can start straight away from an already built project (what Webmatrix provides), I think its best at this point to work henceforth directly from the source. There are a number of reasons for this. </p>]]>
    
    </summary>
    
      <category term="Orchard CMS, Orchard CMS Tutorial" scheme="http://simiansblog.com/tags/Orchard-CMS-Orchard-CMS-Tutorial/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[I Made an Intro for my Usergroup: The Legend of OKC.js]]></title>
    <link href="http://simiansblog.com/2013/03/04/i_made_an_intro_for_okcjs/"/>
    <id>http://simiansblog.com/2013/03/04/i_made_an_intro_for_okcjs/</id>
    <published>2013-03-04T17:30:00.000Z</published>
    <updated>2015-03-23T08:42:56.000Z</updated>
    <content type="html"><![CDATA[<p>Recently, I decided to make a short video intro to put in front of the videos we record at my usergroup. I composed the music myself and did all the animation and compositing.</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/1_1cSOctjg4" frameborder="0" allowfullscreen></iframe></div>
]]></content>
    <summary type="html">
    <![CDATA[<p>Recently, I decided to make a short video intro to put in front of the videos we record at my usergroup. I composed the music myself and ]]>
    </summary>
    
      <category term="OKCjs, Usergroup, Video Compositing, Chiptunes, Animation, Javascript, Community" scheme="http://simiansblog.com/tags/OKCjs-Usergroup-Video-Compositing-Chiptunes-Animation-Javascript-Community/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[How to Loop an Animation in After Effects]]></title>
    <link href="http://simiansblog.com/2013/03/03/loop_an_animation_in_aftereffects/"/>
    <id>http://simiansblog.com/2013/03/03/loop_an_animation_in_aftereffects/</id>
    <published>2013-03-03T15:00:00.000Z</published>
    <updated>2015-04-06T03:39:19.000Z</updated>
    <content type="html"><![CDATA[<p>Occasionally I fond myself doing work in Adobe After Effects. One of the most common tasks I do, when compositing is have one of my clips loop indefinitely. This seriously beats the alternative: copy and paste hell.</p>
<p>Its really simple to do, and all you have to do is write one line of script.</p>
<p>Here is an example of how to do it. I have a clip I’m working here, where I’m trying to simulate an old school NES password prompt.</p>
<img src="/images/loop_an_animation_in_aftereffects/ae1.png">
<a id="more"></a>
<p>See that Gold  Square up there? I need that to blink, repeatedly- like a cursor. Then, I need to move that around and a typing animation plays, and this leads the text as it comes in. The effect is as if a person is quickly entering a password. Its really kickass. Lets make the cursor.</p>
<p>I go into Photoshop, make a rectangle, add bevel and emboss  as a layer effect and voila: a cursor.</p>
<p>Cursor<br><img src="/images/loop_an_animation_in_aftereffects/ae2.png"></p>
<p>There is is. Bask in its majesty! A Cursor. Whooo!</p>
<p>Now, I take the cursor and add it to my After Effect’s project resources.</p>
<img src="/images/loop_an_animation_in_aftereffects/ae3.png">
<p>Wonderful. So far, so easy. Now I want it to flash. I make a new composition, and simply adjust the opacity, to make it fade out.</p>
<img src="/images/loop_an_animation_in_aftereffects/ae4.png">
<p>This composition is small – only 5 frames. this thing is going to flash quickly, like a password cursor prompt does. So, lets make it flash in my composition. This is a simple 3 step process.</p>
<img src="/images/loop_an_animation_in_aftereffects/ae5.png">
<p>Step one: Enable Time Remapping. After you drag your composition onto the track canvas, just right click and go to the time submenu and click it. It will be checked now, and then you’re ready for part two.</p>
<img src="/images/loop_an_animation_in_aftereffects/ae6.png">
<p>You select that Fancy new Time Remap row that just popped up under your composition, and Add Expression. Its under the Animation submenu. A new track will appear under the Time Remap, and you can click in the row, and type whatever you need to. You’re ready for step three: the script.</p>
<img src="/images/loop_an_animation_in_aftereffects/ae7.png">
<p>On the row, type this : loop_out(“cycle”, 0). Now the 5-frame loop I made will repeat over and over.  The cursor is blinking! I can now apply any normal compositing techniques from here.</p>
<p>This technique is insanely useful, I use it all the time. A flickering flame, a flashing led, a walking sprite… It can all be done with this easy trick.</p>
<img src="/images/loop_an_animation_in_aftereffects/password.gif">]]></content>
    <summary type="html">
    <![CDATA[<p>Occasionally I fond myself doing work in Adobe After Effects. One of the most common tasks I do, when compositing is have one of my clips loop indefinitely. This seriously beats the alternative: copy and paste hell.</p>
<p>Its really simple to do, and all you have to do is write one line of script.</p>
<p>Here is an example of how to do it. I have a clip I’m working here, where I’m trying to simulate an old school NES password prompt.</p>
<img src="/images/loop_an_animation_in_aftereffects/ae1.png">]]>
    
    </summary>
    
      <category term="Animation, After Effects, Scripting" scheme="http://simiansblog.com/tags/Animation-After-Effects-Scripting/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Okc.js : The Making of an Html5 Game]]></title>
    <link href="http://simiansblog.com/2013/02/18/OKCjs_making_of_an_html5_game/"/>
    <id>http://simiansblog.com/2013/02/18/OKCjs_making_of_an_html5_game/</id>
    <published>2013-02-18T18:00:00.000Z</published>
    <updated>2015-03-23T08:13:43.000Z</updated>
    <content type="html"><![CDATA[<p>Tomorrow, my usergroup is going to have a talk I’m absolutely certain will be incredibly awesome. The guys at Goldfire Studios, James Simpson and Luke Simpkins,  are going to be running the show and talking about their recent creation “Casino RPG”.  It was featured recently on a kickstarter, that, along with many others,  my wife and I contributed to.</p>
<img src="/images/the_making_of_an_html5_game/2013-february-casinorpg_thumb.jpg">
]]></content>
    <summary type="html">
    <![CDATA[<p>Tomorrow, my usergroup is going to have a talk I’m absolutely certain will be incredibly awesome. The guys at Goldfire Studios, James Sim]]>
    </summary>
    
      <category term="Oklahoma City Javascript, Community, Goldfire Studios, Html5, Javascript, OKCjs, James Simpson, Luke Simpkins, Casino RPG" scheme="http://simiansblog.com/tags/Oklahoma-City-Javascript-Community-Goldfire-Studios-Html5-Javascript-OKCjs-James-Simpson-Luke-Simpkins-Casino-RPG/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Constructing Your Own Drumkit in Battery (From Scratch)]]></title>
    <link href="http://simiansblog.com/2012/10/01/constructing_your_own_drumkit_in_battery/"/>
    <id>http://simiansblog.com/2012/10/01/constructing_your_own_drumkit_in_battery/</id>
    <published>2012-10-01T16:30:00.000Z</published>
    <updated>2015-04-17T22:20:17.000Z</updated>
    <content type="html"><![CDATA[<p>One of my favorite sound sets is the 8-bit retro sound palette that one gets from the sample channel of an old Nintendo. I have a tool I really enjoy using in my studio, and that is a Nintendo that has modified cartridge that acts as a midi controller in it. We’ve had some good times together. I’ve been using this thing, literally since the 90s and its been a frequent go-to toy in my arsenal. As some point along the way, I swapped out my bulkier TV screen I used with it for a smaller one, I mounted on the front.</p>
<iframe width="100%" height="450" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/168244021&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true"></iframe>

<p>I’ve used it in a ton of musical tracks. A prominent one, was “God in my automatic Vacuum”, that I wrote nearly 9 years ago</p>
<a id="more"></a>
<img src="/images/battery_drumkit/nes_thumb.jpg">
<p>I’d like to keep using it and generally the melodic lines aren’t so problematic- but the percussion parts I tend to write choke this baby up quite fast. Do you remember when you were a kit, and the Ninendo would freeze up, and you and your friends would pull out the cartridge and ‘blow on it’. Yeah, I’m not sure why we did that. The trick was actually simply reseating the cartridge. What I am saying is that, imagine having to go through that ritual periodically as you are writing a piece of music. See folks this is why old gear has a MIDI panic button. On this? The Panic button is labeled ‘power’. that right, simply resetting the unit isn’t good enough; you also have to drain that flea power too. Seriously, it can get tedious.</p>
<img src="/images/battery_drumkit/8-Bit-NES-Cartridge-Blow-Me-Poster-Post-545x300_thumb_1.jpg">
<p>For those who know me, know that one of my favorite tools is Battery 3 by Native instruments. When it comes to working with percussion lines, especially in the context of electronic music, I consider it second to none. I’ve always wanted to make a battery kit of this thing. I clearly like it enough to keep it for a long time, so why not get it into the Virtual Instrument space? There is a clear theme, to this collection of sounds – and with Battery I can make multiple copies of my ‘8-bit’ drum set, run the individual cells through some awesome dsp, and generally have more control.</p>
<p>At this point, I am going to assume a very novice level of understanding of Battery 3 if you’re reading this. 128 sounds is the largest size of a patch Battery 3 can support (16 x 8). For me, at least ; this is what we want. There is no reason to make a smaller kit than this, we have 8 bit samples aplenty.</p>
<p>In battery you can use the + and – buttons in the corner of the matrix to add and remove columns.</p>
<img src="/images/battery_drumkit/bat_thumb.jpg">
<p>That’s nice and all, but the most efficient way is to click the edit dropdown and select the appropriate matrix size..in this case 16 x 8.</p>
<img src="/images/battery_drumkit/batttery-select-matrix_thumb.jpg">
<p>Now we need to get our samples. In my case, I am going to be using Digital Performer to capture them from the NES. I set up a MIDI track an aux and an audio track.</p>
<img src="/images/battery_drumkit/analog.png">
<p>I’ll explain why I’ve done this. The mono audio track is where I will actually be capturing the samples. The aux track is so that I can use inserts to clean up the samples on the way in. In this instance, the NES is a dirty , dirty little machine. Its noisy, glitch and in dire need of dynamics effects.</p>
<img src="/images/battery_drumkit/cells.png">
<p>The first item is the gate. Really the only point of this is to make the track actually silent when the samples aren’t playing. Next, is a preamp. This, I am using simply to sweeten the sound a bit. Directly from the NES the sample was a bit dull. This added a bit of compression and some punch on some of the bassier clips. The final unit is a multiband compressor, that I am using to tame some of the wilder samples. and bring up the quieter ones. Since the NES responds pretty differently depending on the frequency range, I used a 3 band multiband compressor. I had good results with that. The final effect you see above in the insert sequence was a Limiter. I found I really ended up not needing that after all, so its bypassed here.</p>
<p>The midi track is dead simple- its simply a chromatic scale that ascends, to fire each sample one after the other on the hardware unit.</p>
<p>Now? We capture. This admittedly took a few tries. 80s hardware likes to croak now and then, and occasionally I had it fire samples twice or thrice.</p>
<img src="/images/battery_drumkit/slices.png">
<p>See how frequently it croaks? Those dark bars are where it fires more often than It was supposed to. Don’t get me wrong- I really really like the unpredictability of it on some level, but for this I wanted to keep things a bit clean, relative to my usual workflow.</p>
<p>Now Lets make a place to save out kit, but first a little bit about battery kits.  Check out the folder structure below. As you can see, we can organize our kits by folder, and then the kit consists of a folder with a particular name, and then in that is a folder with the samples, and in the parent directory is the .kt3 file.</p>
<img src="/images/battery_drumkit/directory.png">
<p>This corresponds to this in the editor:</p>
<img src="/images/battery_drumkit/editor.png">
<p>This is handy because it makes it pretty easy to organize your kits. So, I’m going to essentially duplicate this kind of structure for my own kit. There will be a folder for samples and I will save the kit itself in the parent. So first I duplicate the folder structure.</p>
<img src="/images/battery_drumkit/directory2.png">
<p>Then, when I go back into battery  “Save As” and I choose the Nes Kit Samples for the sample Sub folder. Unfortunately when I did this, I got an error related to permissions.</p>
<img src="/images/battery_drumkit/directory3.png">
<p>The fix is simple. - just leave the chosen folder spot blank- let battery make the folder for you. Thanks Battery. After saving you have this:</p>
<img src="/images/battery_drumkit/directory4.png">
<p>So far, so good.</p>
<p>Ok honestly, this next part is the tedious bit. There might be some shortcut way of doing this, but I don’t know it.  It will involve exporting each sound, and naming it. Thank goodness this only happens once.</p>
<p>First Select the waveform, and make sure you also select the master track too. Bounce it to disk. I bounced as a 16-bit wav. That works fine.</p>
<img src="/images/battery_drumkit/bounce1.png">
<img src="/images/battery_drumkit/bounce2.png">
<p>Make sure you saved to the samples folder, it should appear in the folder now.</p>
<p>The final step-You drag the sample to the target cell you wish to map to. You can even drag a batch of samples, and they will map sequentially, one square after another.</p>
<img src="/images/battery_drumkit/just_drag.jpg">
<p>Boom just drag. Here is my amazing kit with ONE whole sample! Now I’m going to do this for all the others. As I go thorough he waveforms I intend to audition each one, normalize it and then bounce it. Name them as best you can.</p>
<p>It’s the same repetitive process over and over. Snip out the waveform, then I was using the Mono Trim Plugin to normalize and audition simultaneously. Honestly, naming these things is the hardest. Ever think about how many adjective you really have to describe a bass drum? Less than you think.</p>
<p>That’s it for part one. Next time I am going to cover how to make multiple kits form the sample set, and what, in my opinion constitutes a good kit. Truthfully, one sample set can yield a lot of versatility, and with a few tricks you can make you kits sound absolutely awesome with Battery.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>One of my favorite sound sets is the 8-bit retro sound palette that one gets from the sample channel of an old Nintendo. I have a tool I really enjoy using in my studio, and that is a Nintendo that has modified cartridge that acts as a midi controller in it. We’ve had some good times together. I’ve been using this thing, literally since the 90s and its been a frequent go-to toy in my arsenal. As some point along the way, I swapped out my bulkier TV screen I used with it for a smaller one, I mounted on the front.</p>
<iframe width="100%" height="450" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/168244021&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true"></iframe>

<p>I’ve used it in a ton of musical tracks. A prominent one, was “God in my automatic Vacuum”, that I wrote nearly 9 years ago</p>]]>
    
    </summary>
    
      <category term="Audio Editing" scheme="http://simiansblog.com/tags/Audio-Editing/"/>
    
      <category term="Aux" scheme="http://simiansblog.com/tags/Aux/"/>
    
      <category term="Bus" scheme="http://simiansblog.com/tags/Bus/"/>
    
      <category term="Digital Performer" scheme="http://simiansblog.com/tags/Digital-Performer/"/>
    
      <category term="Insert Effects" scheme="http://simiansblog.com/tags/Insert-Effects/"/>
    
      <category term="Monitor" scheme="http://simiansblog.com/tags/Monitor/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[A Quick Fix: Monitoring in Digital Performer]]></title>
    <link href="http://simiansblog.com/2012/08/01/quick_fix_monitoring_audio_digital_performer/"/>
    <id>http://simiansblog.com/2012/08/01/quick_fix_monitoring_audio_digital_performer/</id>
    <published>2012-08-01T16:30:00.000Z</published>
    <updated>2015-04-06T03:39:58.000Z</updated>
    <content type="html"><![CDATA[<p>Recently I was working on a short project, and I was in need of monitoring my input audio as it was being passed thorough my inserts. As you know the later versions of Digital Performer (in this case 7.24) have a really useful column you may have noticed: the “Mon” column next to the input column in the tacks view of the sequencer.</p>
<p>That’s the column there, with the lighted speaker icon. Now you can hear the input as you send your midi sequence.</p>
<img src="/images/quick_fix_monitoring_audio_digital_performer/tracks.png">
<a id="more"></a>
<p>However I ran into a problem. Usually when I’m recording a certain persnickety external module – and by that I mean my MIDI enabled NES. I need to run the incoming audio through a little bit of dynamic effects. For one, the Nes emmits a terrible 60hz hum, and is generally noisy. I don’t mind this so much on the actual percussive impulses of the notes – it adds..er… flavor (read: 8-bit trash ). the problem is when the instrument should be tacet it makes a hum.</p>
<p>The point of this, is that I needed to be able to monitor the affect signal. I tried my usual trick of running through an aux..but.. it wasn’t working! Why?</p>
<p>The stranger part of it all,w as that it worked wonderfully with virtual instruments. And I said to myself “Bro, do you even know how to Aux/bus?”</p>
<p>Then I found the answer. It was in a strange location, so hence the post – After messing with the Audio Patch through, Audio Monitor, Settings and a host of other settings, the answer was right up in the menu.</p>
<img src="/images/quick_fix_monitoring_audio_digital_performer/setup.png">
<p>In the Configure Audio System fly out, there is an option for Input Monitoring Mode. Select that.</p>
<p>Then, allow Monitor record-enabled tracks through effects.</p>
<img src="/images/quick_fix_monitoring_audio_digital_performer/input.png">
<p>I don’t know about you, but I found this setting to be in sort of an unusual place. I think I initially predicted its location to be in the Bundles menu, but I suppose that’s not an optimal spot eiter.</p>
<p>In any case, that’s the fix.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Recently I was working on a short project, and I was in need of monitoring my input audio as it was being passed thorough my inserts. As you know the later versions of Digital Performer (in this case 7.24) have a really useful column you may have noticed: the “Mon” column next to the input column in the tacks view of the sequencer.</p>
<p>That’s the column there, with the lighted speaker icon. Now you can hear the input as you send your midi sequence.</p>
<img src="/images/quick_fix_monitoring_audio_digital_performer/tracks.png">]]>
    
    </summary>
    
      <category term="Audio Editing, Digital Performer, Monitor, Aux, Bus, Insert Effects" scheme="http://simiansblog.com/tags/Audio-Editing-Digital-Performer-Monitor-Aux-Bus-Insert-Effects/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[How to Split a List in Javascript]]></title>
    <link href="http://simiansblog.com/2012/03/18/simple_Take_split_list_jquery/"/>
    <id>http://simiansblog.com/2012/03/18/simple_Take_split_list_jquery/</id>
    <published>2012-03-18T17:00:00.000Z</published>
    <updated>2015-04-06T03:40:23.000Z</updated>
    <content type="html"><![CDATA[<p>Occasionally someone taps my should to ask a quick javascript question. I figure that if someone is asking, its probably worth writing a quick blog post about. This post is geared to someone that is more or less newer to frontend stuff, and is looking for a few tips to help them out.</p>
<p>The question was: I have a list of 12 items, in a ul. I’d like to split it in half, and make two seperate lists. How can I do this?</p>
<p>Actually, this seemingly straightforward question is a good chance to talk about a few things.</p>
<p>Foremost:  the code is pretty straightforward if you do this in jQuery. First, here is the jQuery way: </p>
<iframe width="100%" height="300" src="http://jsfiddle.net/the_Simian/ySL4U/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe>
<a id="more"></a>
<p>So far, so good. Notice the first statement is simply to target a desired ul. the next bit uses an interesting jQuery pseudoselector: gt. This of course stands for ‘greater than’ and takes an index. since our list is 12 items, and index of 5 is exactly halfway in, since its 0 indexed. Its counterpart is lt, which is ‘less than’.</p>
<p>Now, at this point, I always suggest pulling something off the DOM, working ‘in memory’ and then doing a single DOM resinsertion. Get in the practice of thinking like this. Working directly on the DOM is slow-sauce, and you don’t want to go there. So, we use .remove(). Notice the selection itself is cached in our variable $last6lis. I should add that I personally always preface a jQuery variable with $. This is a way of keeping your jQuery DOM pieces separated from plain old javascript ‘data’.</p>
<p>Then we make a ‘ul’ tag in memory, pop our list items in that, and push it back onto the DOM, directly after our targetd item.</p>
<p>And all is right in the world.</p>
<p>Only… we can do just a tiny bit more. </p>
<p>first of all, while the lt and gt selectors are certainly great, the <code>.splice()</code> function is technically faster, and in my opinion more clear. Recall that jQuery selectors, are really lists of jQuery objects. Actually, if you can internalize that with jQuery its ‘always’ a list - that makes life easier. </p>
<p>So lets try a quick experiment: first lets ditch the :gt selector and replace it with <code>splice()</code>. That means we need indexes 6-11, so we’d write something like: </p>
<p><code>$ul.find(&#39;li&#39;).splice(6,11)</code> instead of <code>$ul.find(&#39;li:gt(5)&#39;)</code></p>
<p>That’s cool and all, but if you drop that directly in the fiddle.. it totally doesnt work! Why?</p>
<p>Simple answer: remember earlier that jQuery selectors always return a list of jQuery objects! what does splice return?  Just a primitive array.  The fix: Just wrap the result of the splice in a new jQuery function, and you’re back in action, rockin’ the suburbs.</p>
<p><code>$($ul.find(&#39;li&#39;).splice(6,11))</code>  .. like this.</p>
<p>Well, this is cool! now we can even change these numbers around, and select different segments of the initial list. Now, what if we wanted to refactor and make something that would always split our list in half, regardless of length? The answer is much more clear now, you could do something a bit like this:</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/the_Simian/GgXXL/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe>
<p>Neat! now no matter what the length our li’s grow to be, we can always bisect them! Anytime you can do a small amount of work to make your code not require as much updating, that is handy.  Of course taking this to the next level, would be to pull this code out and put it in a function, or a plugin and begin to make it truly reuseable, but for now, for a quick ‘document ready’ script - this is fine.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Occasionally someone taps my should to ask a quick javascript question. I figure that if someone is asking, its probably worth writing a quick blog post about. This post is geared to someone that is more or less newer to frontend stuff, and is looking for a few tips to help them out.</p>
<p>The question was: I have a list of 12 items, in a ul. I’d like to split it in half, and make two seperate lists. How can I do this?</p>
<p>Actually, this seemingly straightforward question is a good chance to talk about a few things.</p>
<p>Foremost:  the code is pretty straightforward if you do this in jQuery. First, here is the jQuery way: </p>
<iframe width="100%" height="300" src="http://jsfiddle.net/the_Simian/ySL4U/embedded/js,resources,html,css,result/light" frameborder="0" allowfullscreen></iframe>]]>
    
    </summary>
    
      <category term="Javascript, jQuery" scheme="http://simiansblog.com/tags/Javascript-jQuery/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Orchard and Livewriter]]></title>
    <link href="http://simiansblog.com/2012/02/01/Orchard_and_LiveWriter/"/>
    <id>http://simiansblog.com/2012/02/01/Orchard_and_LiveWriter/</id>
    <published>2012-02-01T14:30:00.000Z</published>
    <updated>2015-04-06T03:40:34.000Z</updated>
    <content type="html"><![CDATA[<p>I decided to make a quick post detailing how to connect Orchard CMS with Live Writer. There are a number of advantages to using LiveWriter, rather than the HTML editor on the remote blog. For one, you can work offline, which might be handy now and then if you’re in a situation where you don’t have a decent internet connection. A second advantage is the fact that you can keep a local backup of all your posts. I don’t recommend this being your only backup, of course- but hey a little replication doesn’t hurt. Of course my favorite reason is to make use of the superior editor and plugins. Really, the editor is nice. It feels like Word with spell check and such, but you can also go into the source view and make sure everything is clean. It doesn’t inject a bunch of junk into your markup either.</p>
<a id="more"></a>
<p>Ok, so the first thing to make sure of, is that you actually have Live Writer already installed. In my case I did, because it came with the Windows Live suite, but if you don’t : Here is the link to get it.</p>
<p>Now lets assume you’ve already deployed Orchard on your server, or into the cloud or however you wish to do it. I started Live Writer and was Immediately prompted with this:</p>
<img src="/images/orchard_and_livewriter/choose-blog-service-orchard-livewriter_thumb.jpg">
<p>Make sure you pick the last option: Other Services. Now you’ll be prompted to fill our your blog information:</p>
<img src="/images/orchard_and_livewriter/orchad-and-livewriter-fill-out-settings_thumb.jpg">
<p>This part may give you some trouble if you’re not sure what to type, so I’ll be clear here. The address is not for the address of your root Orchard installation(your homepage) , but for the blog itself. Orchard is capable of hosting many blogs per orchard site, you see. If you are using Orchard though, for just one blog – that blog may very well be your homepage in that case. For me, my blog wasn’t my homepage at all – it was somewhere else. As for the Username and password, that is the user that will be posting. The user needs permissions to post of course. Then type that user’s password in. This might be your admin name, it may not- but either way the user needs to exist on the Orchard site and needs to be able to make blog posts.</p>
<p>So everything is good … you click next and</p>
<img src="/images/orchard_and_livewriter/orchard-and-livewriter-mess-up_thumb.jpg">
<p>Whoops. If you saw this, then something went wrong. The most likely culprit is that your Orchard installation did not have remote publishing enabled. No problemo, that’s an easy fix.</p>
<img src="/images/orchard_and_livewriter/orchard-and-livewriter-enable-remote_thumb.jpg">
<p>I logged in, and went to the modules section in the Dashboard of my site. You can search for the module, and enable it. In case you’re curious, this all works by Xml-RPC. That’s “eXtended Markup Language Remote Procedure Call”, for what its worth. If you’re really curious, Orchard has some documentation about it. Try connecting again, just hit the back button and then re run it.</p>
<p>If things go well, you get a different window, after Live Writer Discovers your blog.</p>
<img src="/images/orchard_and_livewriter/orchard-and-livewriter_thumb.jpg">
<p>Basically, Live Writer is attempting to discover your blog’s theme in order to make the blog preview. go ahead and select ‘Yes’. In my case, the preview wasn’t perfect – some of the formatting wasn’t quite right, but it was useful enough to help give me an idea.</p>
<img src="/images/orchard_and_livewriter/livewriter-and-orchard-name-blog_thumb.jpg">
]]></content>
    <summary type="html">
    <![CDATA[<p>I decided to make a quick post detailing how to connect Orchard CMS with Live Writer. There are a number of advantages to using LiveWriter, rather than the HTML editor on the remote blog. For one, you can work offline, which might be handy now and then if you’re in a situation where you don’t have a decent internet connection. A second advantage is the fact that you can keep a local backup of all your posts. I don’t recommend this being your only backup, of course- but hey a little replication doesn’t hurt. Of course my favorite reason is to make use of the superior editor and plugins. Really, the editor is nice. It feels like Word with spell check and such, but you can also go into the source view and make sure everything is clean. It doesn’t inject a bunch of junk into your markup either.</p>]]>
    
    </summary>
    
      <category term="Orchard, Live Writer, Editor, Posting, Live Writer Plugins, Xml-Rpc, Remote Content Publishing" scheme="http://simiansblog.com/tags/Orchard-Live-Writer-Editor-Posting-Live-Writer-Plugins-Xml-Rpc-Remote-Content-Publishing/"/>
    
  </entry>
  
</feed>